<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021总结</title>
      <link href="/2022/02/20/2021summary/"/>
      <url>/2022/02/20/2021summary/</url>
      
        <content type="html"><![CDATA[<p>这是一篇迟来的总结，现在已经是2022年2月20日(北京冬奥会今天闭幕)，农历壬寅虎年正月二十。<br>但还是重点说2021年发生的一些事。想起来什么就写什么，所以会有点乱。</p><p>首先说一下2021的意义：疫情后（或者说疫情中）的第一个完整年，也是我研究生毕业后工作的第一个完整年。<br>人生进入新轨道，世界也进入一种新局面。</p><p>年初。春节前，石家庄发生疫情，在农村爆发，据说是在婚宴上传播很广。农村的婚宴，那真的是人口聚集大会。<br>虽然都鼓励不回家，留沪过年，不过接近春节的时候，疫情基本控制住，所以最后我还是做了核酸，回去了。<br>路上也没查核酸。疫情后的第一个春节，正常过，该走亲戚走亲戚。不过作为大龄单身，还是有一些些尴尬。<br>春节过完，坐高铁回上海。</p><p>工作上，参与项目也算顺利。不过遇到一些问题，也会束手无策。也逐渐发现了一些大企业的弊端，比如流程僵化，<br>效率底下，工具老旧，跟不上时代。奈何改变不了，只能去适应。<br>3月份，准备去外场出差。出差前一周的一天晚上，下班时骑电动车与汽车相撞，右脚受伤，当时很疼，不过也没去医院。<br>后来实在担心是不是骨折了，就去拍了片，还好没大事。不过走路只能一瘸一拐了。</p><p>伤筋动骨一百天，虽然没骨折，但那种疼痛程度，我猜筋肯定是伤了。事实证明也是如此，直到出差快结束，脚才恢复到正常状态。<br>另外，当时左胸部有些疼，还有些黄色淤青，可能是摔倒时被车把磕了一下。后来下半年去体检时，记得有条结论说左胸部有阴影，<br>有时间还是去医院检查一下。</p><p>出差的地方是辽宁。渤海之滨，风景很美。</p><p>下半年，出差回来，继续投身项目中。八月份高温假没休息，连续上班十九天（中间有的上半天）。巨累的一两个月。<br>国庆节回家几天，正好收花生。最后两天，秋雨森森，渐凉。</p><p>年底几个月不算忙，不过也没太闲。项目上有一些遗留问题需要解决，很麻烦。<br>年底，据说是效益不错，项目上有几个聚餐。给领导敬酒，不免听领导讲话。有些并不赞同，但也拿他没办法。一个人的认识<br>总有局限，领导也不例外。不过重点还是，他站在领导的角度，而我站在底层员工的角度，角度不同，看到的东西也很不一样。<br>不过人微言轻，以上也就是想想而已。不会有更多的延伸。我的工作重点应该是做好本职工作，提高自身技术能力，并尽量拓宽其他能力。</p><p>厨艺。上半年做的最多的是热干面，西红柿炒蛋，下半年做的最多的是回锅肉，煎豆腐。偶尔还做做炒面，辣子鸡丁，炸鸡米花。<br>当然还有煮饺子，手抓饼，煮泡面这些快餐。腌萝卜不是很成功，接下来准备尝试一下腊八蒜。</p><p>读书。主要是电子版。在知乎上看了几本小说，三体全集（看到第二部），一句顶一万句，追风筝的少年，灿烂千阳，朝闻道等。<br>纸质书的话，诗经，苏轼集，毛泽东选集（刚读第一部）。</p><p>个人问题。这一年中，先后认识了几个女生，最后都和平结束。性格、地域、颜值，原因各异。也有我自己的问题。</p><p>有部电视剧叫三十而已，真应景啊，专门拍给90年和91年的人看的？不过说的也对，三十而已。孔子说，三十而立，三十不立又何妨？<br>三十不立不代表以后就立不起来了。重点还是心态吧，要坚强坚持坚决坚挺，永不言弃。</p><p>天很晚了，就先写到这里。以后可以再补充。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021</title>
      <link href="/2022/02/20/2021/"/>
      <url>/2022/02/20/2021/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正义与邪恶</title>
      <link href="/2021/06/20/note/"/>
      <url>/2021/06/20/note/</url>
      
        <content type="html"><![CDATA[<p>什么才是对的事呢？奋起反抗，还是脚踏实地。</p><hr/><p>今天去了一大会址纪念馆，人很多，熙熙攘攘，跟着讲解员，很快过了一遍，并没有很详细地看。<br>走马观花式地看完，拍了几张照片，就结束了。依然花了一上午，是因为等人和排队。<br>虽说活动有些流于形式，但纪念馆所呈现的内容非常有价值，毕竟那段历史本身就很精彩。<br>过去与现在，理想和现实，这确实会带给我们一些思考。</p><hr/><p>不管世界的最终形态是什么样，我们都不可能一下就跨过去，而只能一步步地，脚踏实地，走过去。</p><p>从党史来看，可以说是一群马克思主义者结合中国实际践行了马克思主义。但是后来，限于国情，不能够按照马列继续行进，只能把理想珍藏，<br>先脚踏实地地干一些事情，解决一些问题。比如老百姓的温饱问题，这很重要。大部分人的温饱问题在上世纪末已经得到解决，如今正在开展扶贫，<br>解决最后一批人的温饱问题。衣食住行是人的最根本需求，其中的衣食便是温饱问题，而住行呢，虽然无忧，却也分好坏。</p><p>既不能只看到好的方面，也不能仅看到坏的方面。</p><hr/><p>思考的太多，学习的太少，也不好。思而不学则殆。</p><p>关于马列等理论方面，了解得还不全面，理解得也不深刻；对于国情，了解也有不足，分析也不一定到位。</p><p>需要去做，而不是空想。</p><p>读书，调查。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>办理落户与相亲</title>
      <link href="/2020/11/14/note/"/>
      <url>/2020/11/14/note/</url>
      
        <content type="html"><![CDATA[<p>最近有两件头疼事。</p><p>第一件是办理落户。</p><p>今年上海放松落户政策，不需要用单位的三分了。</p><p>不过受疫情影响，比往年推迟了些，上周批复才下来，然后我又因为工作忙没顾上。周五才想起来，发现这周来不及了。</p><p>按流程来，现在有两件急迫的事情，报到证改派和调档案。<br><span id="more"></span></p><p>1.报到证改派，问了学校就业办，说是需要报到证原件、单位接收函和批复黄联，就可以办理。每周四领新报到证，所以需要周三之前把上面几个材料交过去。单位接收函周一可以去办。</p><p>2.掉档案，问了市人才交流中心，说需要委托人代办，手写委托书，签字按手印，拿着调档函去取档案，还是挺麻烦的。调档函问了单位，周一才能办出来。</p><p>所以，周一去办调档函和接收函。然后分别把相关材料寄回家和学校。并发办理。</p><p>有空再研究一下接下来的流程。头疼。</p><p>第二件是相亲。</p><p>市里亲戚介绍一个姑娘，说是也在上海工作，一直没什么回复，其实在我意料之中。门当户对在我看来还是很重要的一条。不过</p><p>自从2017年，我还是比较自卑，有点社交恐惧症。</p><p>之后几年，除了读个硕士，又无别的建树，感觉一无所有。</p><p>我又配得上谁呢。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习笔记</title>
      <link href="/2020/04/17/learndjango/"/>
      <url>/2020/04/17/learndjango/</url>
      
        <content type="html"><![CDATA[<p>最新进度见<a href="https://github.com/wmjtxt/Django-Learning-Notes">https://github.com/wmjtxt/Django-Learning-Notes</a>, 这里就不更新了。</p><p>最近在学习Python，看小甲鱼的视频，并参考了<a href="https://github.com/TwoWater">TwoWater</a>的<a href="https://github.com/TwoWater/Python">草根学Python</a>, 其中提到了Django，和国外一个博客上的Django教程。遂开始学习Django.</p><h2 id="Django教程"><a href="#Django教程" class="headerlink" title="Django教程"></a>Django教程</h2><p>一个浅显易懂的Django教程: <a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/">A Complete Beginner’s Guide to Django</a></p><p>该教程共包含7个部分（Part）,以搭建一个论坛为例子，较为详细地介绍了Django搭建流程。</p><p>在Github上有关于它的中文翻译: <a href="https://github.com/wzhbingo/django-beginners-guide">A Complete Beginner’s Guide to Django 翻译计划</a>, 不过只有前2个Part是完整翻译的，剩下的没翻译完，好像是中止了，所以后面的部分我都是看的英文原版)。</p><p>根据教程一步一步执行命令，遇到问题并解决问题，虽然大多数问题是漏了某个步骤或某行代码，但在解决问题的过程中会仔细查看代码和步骤，这样就加深了理解。而且，由于其中涉及了不少HTML, CSS等相关<br>知识，需要的时候也去看看，学到不少。</p><p>为防止遗忘，自己动手做一个简略版的记录，也方便以后需要的时候回看。<br><span id="more"></span></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#part1入门">Part1 入门</a><ul><li><a href="#环境搭建">环境搭建</a></li><li><a href="#django项目">Django项目</a></li><li><a href="#django应用">Django应用</a></li><li><a href="#helloworld">Hello,World</a></li></ul></li><li><a href="#part2基础">Part2 基础</a><ul><li><a href="#论坛项目">论坛项目</a></li><li><a href="#django模型设计">Django模型设计</a></li><li><a href="#迁移模型">迁移模型</a></li><li><a href="#模型操作">模型操作</a></li><li><a href="#设置template">设置Template</a></li><li><a href="#测试主页">测试主页</a></li><li><a href="#静态文件设置">静态文件设置</a></li><li><a href="#djangoadmin">Django Admin</a></li></ul></li><li><a href="#part3进阶">Part3 进阶</a><ul><li><a href="#urls">URLs</a></li><li><a href="#设置topics页面">设置Topics页面</a></li><li><a href="#测试Topics页面">测试Topics页面</a></li><li><a href="#可重用templates">可重用Templates</a></li><li><a href="#表单">表单</a></li></ul></li><li><a href="#part4身份验证">Part4 身份验证</a></li><li><a href="#part5djangoorm">Part5 Django ORM</a></li><li><a href="#part6基于类的视图">Part6 基于类的视图</a></li><li><a href="#part7部署">Part7 部署</a></li></ul><p>## </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>安装python3<ul><li>略</li></ul></li><li>安装Virtualenv<ul><li><code>sudo pip3 install virtualenv</code></li></ul></li><li>使用virtualenv<ul><li>新建文件夹myproject : <code>mkdir myproject</code>、 <code>cd myproject</code></li><li>创建虚拟环境 : <code>virtualenv venv -p python3</code></li><li>激活虚拟环境 : <code>source venv/bin/activate</code></li><li>退出虚拟环境 : <code>deactivate</code></li></ul></li><li>安装Django<ul><li><code>pip install django==1.11.4</code></li></ul></li></ul><h2 id="Django项目"><a href="#Django项目" class="headerlink" title="Django项目"></a>Django项目</h2><ul><li><p><strong>创建Django项目</strong>: 在myproject文件夹下，开启虚拟环境后，执行下面的命令，创建新的Django项目, 其中<code>myproject</code>为项目名称:</p><ul><li><code>django-admin startproject myproject</code></li></ul></li><li><p><strong>查看目录结构</strong>: 创建项目成功后，可以使用命令<code>tree myproject</code>查看myproject的目录结构，其中的主要文件如下:</p><ul><li>manage.py</li><li>__init__.py</li><li>settings.py</li><li>urls.py</li><li>wsgi.py</li></ul></li><li><p><strong>开启服务器</strong>: 在manage.py所在文件夹下，执行下面的命令，开启网络服务器:</p><ul><li><code>python manage.py runserver</code></li></ul></li></ul><h2 id="Django应用"><a href="#Django应用" class="headerlink" title="Django应用"></a>Django应用</h2><ul><li><p>在Django项目中，有两个重要的概念：</p><ul><li><strong>app</strong>: 完成某个任务的web应用程序, app由models（数据库表）, views（视图）, templates（模板）, tests（测试）组成。</li><li><strong>project</strong>: 是配置和应用的集合, 一个项目由一个或多个应用组成。</li></ul></li><li><p><strong>创建Django应用</strong>: 在manage.py所在文件夹执行以下命令,其中<code>boards</code>为app名称</p><ul><li><code>django-admin startapp boards</code></li></ul></li><li><p><strong>文件解释</strong>: 创建boards应用后，会生成一个以boards为名的文件夹，其中的主要文件（夹）如下：</p><ul><li><strong>migrations/</strong>: 存储一些文件，以跟踪models.py文件的变更，用来保持数据库和models.py的同步</li><li><strong>admin.py</strong>: Django admin配置文件</li><li><strong>apps.py</strong>: 本应用的配置文件</li><li><strong>models.py</strong>: 定义web应用数据实例</li><li><strong>tests.py</strong>: 单元测试</li><li><strong>views.py</strong>: 处理web应用程序请求响应周期的文件</li></ul></li><li><p><strong>启用boards应用</strong></p><ul><li>找到settings.py的<code>INSTALLED_APPS</code>列表, 将应用<code>&#39;boards&#39;</code>添加到该列表中。</li></ul></li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h2><p>在views.py和urls.py中添加如下代码:</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在views.py里面添加home函数</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment" spellcheck="true">#new</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#new</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'Hello, World!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#new</span></code></pre><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在urls.py里面添加匹配url的正则表达式</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> boards <span class="token keyword">import</span> views <span class="token comment" spellcheck="true">#new</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>home<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#new</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>执行命令<code>python manage.py runserver</code>，在浏览器打开<a href="http://127.0.0.1:8000，可以看到效果啦">http://127.0.0.1:8000，可以看到效果啦</a></p><h1 id="Part2-基础"><a href="#Part2-基础" class="headerlink" title="Part2 基础"></a>Part2 基础</h1><h2 id="论坛项目"><a href="#论坛项目" class="headerlink" title="论坛项目"></a>论坛项目</h2><p>项目是一个论坛系统，由多个板块(Boards)组成, 板块由主题帖(Topic)组成，主题帖里有回复帖(Post)，主题帖和回复帖均由用户(User)创建。</p><p>所以这个项目共包含四个类Board, Topic, Post, User。由于Django在contrib中内置了User类，所以只需创建其余三个类。</p><p>以下两方面需要考虑：</p><ul><li><strong>各类之间的关系</strong>: <ul><li>Board and Topic: 1-0..*</li><li>Topic and Post: 1-1..*</li><li>Topic and User: 0..*-1</li><li>Post and User: 0..*-1</li></ul></li><li><strong>各类（模型）的设计</strong>: <ul><li>Board: 包含两个字段：name和description</li><li>Topic: 包括四个字段：subject，last_update，starter, board</li><li>Post: 有一个message字段，用于存储回复内容，create_at，update_at</li></ul></li></ul><h2 id="Django模型设计"><a href="#Django模型设计" class="headerlink" title="Django模型设计"></a>Django模型设计</h2><p>Board, Topic, Post这些模型的设计对应着应用程序的数据库设计。</p><p>根据上面的模型设计，相关代码实现在boards/models.py文件中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Board</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    description <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    subject <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    last_updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    board <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Board<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'topics'</span><span class="token punctuation">)</span>    starter <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">4000</span><span class="token punctuation">)</span>    topic <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Topic<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'posts'</span><span class="token punctuation">)</span>    created_at <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    updated_at <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    created_by <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'posts'</span><span class="token punctuation">)</span>    updated_by <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span></code></pre><p>上面所有模型都是django.db.models.Model类的子类，每个类都将被转换成数据库表。</p><h2 id="迁移模型"><a href="#迁移模型" class="headerlink" title="迁移模型"></a>迁移模型</h2><p>迁移模型就是告诉Django创建数据库，分两步</p><p>第一步，执行<code>python manage.py makemigrations</code>，执行完产生一个0000_initial.py文件，该文件代表了应用的当前状态，相当于做了一个汇总，为接下来转换数据库做准备。</p><p>第二步，执行<code>python manage.py migrate</code>，这一步根据迁移文件生成数据库。</p><h2 id="模型操作"><a href="#模型操作" class="headerlink" title="模型操作"></a>模型操作</h2><p>建好模型，就可以对它进行操作了。</p><p>操作之前，要先启动Python shell:</p><p><code>python manage.py shell</code></p><p>对模型进行操作的方法总结如下:</p><table><thead><tr><th>操作</th><th>代码示例</th></tr></thead><tbody><tr><td>创建一个对象而不保存</td><td>board = Board()</td></tr><tr><td>保存一个对象</td><td>board.save()</td></tr><tr><td>数据库中创建并保存一个对象</td><td>Board.objects.create(name=’..’,description=’..’)</td></tr><tr><td>列出所有对象</td><td>Board.objects.all()</td></tr><tr><td>通过字段标识获取单个对象</td><td>Board.objects.get(id=1)</td></tr></tbody></table><h2 id="设置Template"><a href="#设置Template" class="headerlink" title="设置Template"></a>设置Template</h2><p>在manage.py所在文件夹下新建templates文件夹，并新建文件home.html</p><p><strong>templates/home.html</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token entity" title="&#123;">&amp;#123;</span>% for board in boards %<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token entity" title="&#123;">&amp;#123;</span>% endfor %<span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在<strong>settings.py</strong>里找到<code>TEMPLATES</code>变量，并设置<code>DIRS</code>为<code>os.path.join(BASE_DIR, &#39;templates&#39;)</code></p><p>然后，修改<strong>boards/views.py</strong>:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Board<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    boards <span class="token operator">=</span> Board<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'home.html'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'boards': boards&amp;#125;)</span></code></pre><h2 id="测试主页"><a href="#测试主页" class="headerlink" title="测试主页"></a>测试主页</h2><p>测试环节非常重要。比如测试主页的简单例子:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>urlresolvers <span class="token keyword">import</span> reverse<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase<span class="token keyword">class</span> <span class="token class-name">HomeTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_home_view_status_code</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEquals<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></code></pre><p>这是一个非常简单但非常有用的测试用例，测试的是请求URL后返回的响应状态码。状态码200意味着成功。当有很多个视图（比如上百个），<br>用上述测试，只需一个命令，就能够测试是否所有视图返回成功。如果没有自动化测试，我们就需要逐一检查每个页面。</p><p>若要查看更详细的信息，可以设置verbosity为2<br><code>python manage.py test --verbosity=2</code><br><code>verbosity为0表示无输出，为1表示正常输出，2表示详细输入</code></p><h2 id="静态文件设置"><a href="#静态文件设置" class="headerlink" title="静态文件设置"></a>静态文件设置</h2><p>静态文件是指CSS，JavaScript，字体，图片或者用来组成用户界面的任何其他资源</p><p>首先在<strong>manage.py</strong>所在文件夹下新建static文件夹.</p><p>然后，<a href="https://getbootstrap.com/docs/4.0/getting-started/download/#compiled-css-and-js">下载bootstrap</a>, 解压，将css/bootstrap.min.css放到static文件夹下</p><p>修改<strong>templates/home.html</strong>以应用Bootstrap CSS:</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% load static %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;% static <span class="token punctuation">'</span>css/bootstrap.min.css<span class="token punctuation">'</span> %&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb my-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thead-inverse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Board<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Posts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Last Post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span>% for board in boards %<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-muted d-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.description <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>align-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>align-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span>% endfor %<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里原作者的结果图里表头(thead)是黑底白字，但我的不是，也不知道为啥，网上查了查，好像是thead-inverse的作用，<br>就是不知道为啥thead-inverse在我这里不起作用，后来查了CSS, 发现用下面的语句也可以起到表头黑底白字的作用(强迫症.jpg)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    th&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="Django-Admin"><a href="#Django-Admin" class="headerlink" title="Django Admin"></a>Django Admin</h2><p>执行<code>python manage.py createsuperuser</code>, 依次输入Username, Email, Password即可</p><p>启动服务后，访问<a href="http://127.0.0.1:8000/admin/可以看到登录页面，用刚刚设置的">http://127.0.0.1:8000/admin/可以看到登录页面，用刚刚设置的</a><br>用户名和密码可以登录, 登录进去以后可以完成一些操作。</p><h1 id="Part3-进阶"><a href="#Part3-进阶" class="headerlink" title="Part3 进阶"></a>Part3 进阶</h1><h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>Django项目里有一个root URLconf, 在settings.py里面可以找到<br><code>ROOT_URLCONF=&#39;myproject.urls&#39;</code>, 其中<code>myproject</code>是项目名称</p><p>Django的URL处理流程：</p><pre><code>request--&gt;urlpatterns--&gt;view function--&gt;html</code></pre><p>如果在urlpatterns里没有找到匹配的url，就返回404，Page Not Found</p><p>url function</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> view<span class="token punctuation">,</span> kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><h2 id="设置Topics页面"><a href="#设置Topics页面" class="headerlink" title="设置Topics页面"></a>设置Topics页面</h2><p>设置Topics页面需要如下三个步骤：</p><p><strong>首先</strong>，在<strong>url.py</strong>里添加新的URL路由:<br><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> boards <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>home<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^boards/(?P&lt;pk>\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>board_topics<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'board_topics'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#new</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>其次</strong>，在views.py里新建board_topics函数:<br><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Board<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># code suppressed for brevity</span><span class="token keyword">def</span> <span class="token function">board_topics</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#new</span>    board <span class="token operator">=</span> Board<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'topics.html'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'board': board&amp;#125;)</span></code></pre><p><strong>最后</strong>，在templates文件夹，新建topics.html:<br><strong>topics.html</strong></p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% load static %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;% static <span class="token punctuation">'</span>css/bootstrap.min.css<span class="token punctuation">'</span> %&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb my-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>其中, 在urls.py里面添加的语句里面比较重要，尤其是<code>?P&lt;pk&gt;\d+</code></p><h2 id="测试Topics页面"><a href="#测试Topics页面" class="headerlink" title="测试Topics页面"></a>测试Topics页面</h2><h2 id="可重用Templates"><a href="#可重用Templates" class="headerlink" title="可重用Templates"></a>可重用Templates</h2><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抗疫战争</title>
      <link href="/2020/04/11/kangyi/"/>
      <url>/2020/04/11/kangyi/</url>
      
        <content type="html"><![CDATA[<p>过年时，疫情爆发，武汉封城，全国禁足。那时候以为疫情最多一个月也就结束了，由于论文还没写完，在家写的实在太慢，感到很焦急，只希望疫情赶快结束，回校写论文。</p><span id="more"></span><p>后学校发通知，说3月1号前不开学，于是只能在家安心写论文，效率低也得慢慢挤。挤的是真的慢。3月1号左右才基本完成初稿，后来又查重，重复率很高，想尽各种办法降重，提交学校初检，然后送审。送审前的几天家里有点事，正文一点没改就交了。交完才发现，万一盲审不过，后面挺麻烦的，可已经送审出去，也没办法了，只能听天由命。</p><p>3月1日依旧没有开学的消息，甘肃省发通知说3月15日前不开学。3月15日依旧没消息，可能是受到国外疫情的输入病例影响，记得当时兰州有大概几十例，还有一例是从湖北返兰复工确诊的。一直到后来，甘肃省通知4月13日高三先开学，高校毕业年级可先开学，不过学校依旧没有消息。其实现在去学校也没啥事了，论文盲审要一个月左右，所以5.1之后开学也来得及。</p><p>前两天，在院群里让填一个问卷，说第二天研究开学事宜，不过后来还是没有消息。倒是又强调了一遍，不准擅自返校。</p><p>在国内拐点出现、湖北省外基本无新增、湖北新增陆续减少、国内新增降至100以内等等一系列好消息之后，我本以为开学在望，偏偏3月初国外疫情大爆发，远甚于国内，并且有一些国外输入病例。全国机场海关不得不严阵以待，严防输入病例。</p><p>另外，国内还零星发现一些病例，以及一些无症状感染者。自4月1日起，每日报告新增无症状感染者，并继续采取隔离措施（原本无症状的阳性就隔离，只是没公布数量）。现在每天会有几十例无症状感染者，主要还是来自湖北。由于无症状比较难以发现，容易在人群中悄然传播，所以依旧不能放松。这也是这个病毒真正厉害之处。在疫情爆发之初，就曾有无症状感染者，当时就觉得无症状也能传染，实在是防不胜防。我还担心会不会疫情因此难以有效控制，不过好在我国采取了几乎可以说完美的隔离防控措施，很快就控制住了疫情。之后无症状感染也被再提起，并引起重视。可谓乘胜追击，无往不胜。</p><p>国外的爆发，尤其是欧美等国家，实在是出人意料，说他们是猪脑子一点不为过。有我国的前车之鉴在先，他们不仅不重视，而且几乎是反其道而行之，似乎真觉得这病毒只感染亚洲人。</p><p>现在全球140多万，美国50万，拐点还不知道在哪。中国如今就是世界的诺亚方舟。但国外这么严重，我们也难以独善其身，一方面要派援助，捐赠或者出口物资和防护用品，一方面还得严防输入病例，全国上下不敢松一口气。</p><p>4月以来，部分省份的学校开始试点开学，这是对的，总不能一直不开学吧。只是开学后，一旦再发现病例，就要及时采取有效措施。比如隔离、封校等等。代价当然有，但总比坐吃等死强吧。</p><p>论文送审，暂时闲下来，看电视剧看电影玩游戏，真的颓废。</p><p>有时间要开始学学Python了，上次存了几个G的视频和资料，Github上也有不少资源，都可以参考。</p><p>fightingggggggggggggggggggggg</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 疫情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python画直方图和点线图及Gephi的使用方法</title>
      <link href="/2020/02/29/Python-matplotlib/"/>
      <url>/2020/02/29/Python-matplotlib/</url>
      
        <content type="html"><![CDATA[<p>毕业论文里需要画图，先想到matlab，但之前的安装包用不了，网上有但几个G下载太慢。所以就用了Python。用Python也是一波三折，一开始matplotlib老是安装不了。后来还是在Windows10上弄成了。</p><p>另外，毕业论文是复杂网络社团检测相关的，所以要用Gephi画网络的社团结构划分图，也在这里记录一下。</p><span id="more"></span><h1 id="一、Python画直方图"><a href="#一、Python画直方图" class="headerlink" title="一、Python画直方图"></a>一、Python画直方图</h1><p>直接看例子吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> pylab <span class="token keyword">import</span> mplmpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#设置字体</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">]</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">]</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>        <span class="token punctuation">[</span>k<span class="token punctuation">,</span>d<span class="token punctuation">,</span>l<span class="token punctuation">,</span>p<span class="token punctuation">,</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span>        index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#data.hist()</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>rot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rot设置坐标轴文字的方向</span><span class="token comment" spellcheck="true">#data.plot.barh()</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Title"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#plt.ylim(0,0.8) #y轴的范围</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/zhifang.png" alt="直方图"></p><h1 id="二、Python画点线图"><a href="#二、Python画点线图" class="headerlink" title="二、Python画点线图"></a>二、Python画点线图</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> pylab <span class="token keyword">import</span> mplmpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">]</span>y1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">]</span>y2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span>y3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span>y4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下面几行的gbcr表示颜色</span><span class="token comment" spellcheck="true"># ×s^v表示点的格式</span><span class="token comment" spellcheck="true"># 后面的-表示画线，不加-的话只画点图了</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span><span class="token string">'g*-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">,</span><span class="token string">'bs-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y3<span class="token punctuation">,</span><span class="token string">'c^-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y4<span class="token punctuation">,</span><span class="token string">'rv-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>r<span class="token string">'$\mu$'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#x轴标签为希腊字母谬</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Q'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置x轴范围</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/dianxian.png" alt="点线图"></p><h1 id="三、Gephi的使用步骤"><a href="#三、Gephi的使用步骤" class="headerlink" title="三、Gephi的使用步骤"></a>三、Gephi的使用步骤</h1><p>以Karate网络为例</p><h4 id="1-添加网络的邻接表-格式为csv"><a href="#1-添加网络的邻接表-格式为csv" class="headerlink" title="1.添加网络的邻接表, 格式为csv"></a>1.添加网络的邻接表, 格式为csv</h4><p><img src="/images/matplotlib1.png" alt="1"><br>选择图的类型：无向的，选New workspace</p><h4 id="2-添加网络的社团划分-格式为csv"><a href="#2-添加网络的社团划分-格式为csv" class="headerlink" title="2.添加网络的社团划分, 格式为csv"></a>2.添加网络的社团划分, 格式为csv</h4><p><img src="/images/matplotlib3.png" alt="2"><br>选择图的类型：无向的，选Append to existing workspace</p><h4 id="3-调整参数，选择布局，调整网络图"><a href="#3-调整参数，选择布局，调整网络图" class="headerlink" title="3.调整参数，选择布局，调整网络图"></a>3.调整参数，选择布局，调整网络图</h4><p><img src="/images/matplotlib4.png" alt="3"></p><h4 id="4-结果"><a href="#4-结果" class="headerlink" title="4.结果"></a>4.结果</h4><p><img src="/images/karate.png" alt="karate"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析软链接与硬链接</title>
      <link href="/2019/11/05/ln/"/>
      <url>/2019/11/05/ln/</url>
      
        <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>Linux系统中的文件包含两个部分：用户数据(user data)与元数据(metadata)。用户数据存放文件的内容，元数据则存储文件的属性。<br>元数据中的inode号是文件的唯一标识, 而不是文件名。其实，一个inode号对应一个或多个文件名，这就是<strong>硬链接(hard link)</strong>。因此，<br>硬链接可以理解为同一个文件的多个别名。而<strong>软链接(soft link)</strong>则是文件的用户数据存放指向另一个文件的指针，它拥有自己的inode号。软链接与Windows系统的快捷方式很相似。</p><span id="more"></span><h1 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h1><ul><li>创建软链接(soft link): <code>ln -s file softfile</code></li><li>创建硬链接(hard link): <code>ln file hardfile</code> or <code>link file hardfile</code></li></ul><h1 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h1><ul><li>软链接 : 文件类型为符号链接，文件中存放有一个指向原文件路径的指针</li><li>硬链接 : 下为VFS中的inode结构体<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> inode<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">const</span> <span class="token keyword">struct</span> inode_operations   <span class="token operator">*</span>i_op<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引节点操作</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span>                   i_ino<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引节点号</span>  atomic_t                        i_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引用计数器</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>                    i_nlink<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//硬链接数目</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>创建硬链接后，i_nlink加1</li></ul><h1 id="区别与联系-简述"><a href="#区别与联系-简述" class="headerlink" title="区别与联系(简述)"></a>区别与联系(简述)</h1><ul><li>软链接是新建一个文件，硬链接是为文件建一个别名。</li><li>软链接可以跨文件系统，硬链接不可以。</li><li>软链接可以对目录操作，硬链接不可以。</li><li>删除原文件，软链接失效，硬链接不影响。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程并行计算</title>
      <link href="/2019/09/15/multiThread/"/>
      <url>/2019/09/15/multiThread/</url>
      
        <content type="html"><![CDATA[<p>关于多线程一直没有搞懂，最近面试也被问到C++11的thread和linux的pthread，由于我之前只用过pthread，连thread咋用都不知道，<br>后来看了thread的用法，编译的时候也要加-lpthread，难道底层是pthread？无从得知，网上也找不到。可能只是部分用到了pthread吧。<br><span id="more"></span></p><p>为了搞懂多线程，就想找个题目实践一下。</p><p>然后我就找到一篇博客，用Java写的多线程并行计算的代码，就是简单的求1到N的和，N是90000000。<br>那篇博客地址:<a href="https://blog.csdn.net/whandwho/article/details/80159377">https://blog.csdn.net/whandwho/article/details/80159377</a></p><p>于是我就想用C++的多线程来实现一下。</p><p>就找到了这篇博客<a href="https://blog.csdn.net/whandwho/article/details/80159377">https://blog.csdn.net/whandwho/article/details/80159377</a>, 里面用C++的thread实现了并行加法，<br>稍作改动，便解决了上面的问题。</p><p>然后，考虑用pthread来实现, 毕竟我之前做项目有用过pthread, 对它还算熟悉。经过好一番折腾，总算是做出来了。</p><p>下面奉上代码和运行结果比较。<br>为了方便对比，一开始就写了单线程计算的，其实后来多线程版本都支持输入线程数, 但方便对比就按原来的吧。<br>另外，N设为900000000，也就是9亿，比那个Java的多个0。</p><h2 id="运行结果1-单线程，thread和pthread"><a href="#运行结果1-单线程，thread和pthread" class="headerlink" title="运行结果1 : 单线程，thread和pthread"></a>运行结果1 : 单线程，thread和pthread</h2><p><img src="/images/thread1.png" alt="pic1"></p><h2 id="运行结果2-thread和pthread，不同线程数"><a href="#运行结果2-thread和pthread，不同线程数" class="headerlink" title="运行结果2 : thread和pthread，不同线程数"></a>运行结果2 : thread和pthread，不同线程数</h2><p><img src="/images/thread2.png" alt="pic2"><br>可以看到，开启8个线程比开3个线程更快。事实上，我试了很多，基本上8个线程是最快的，这道题属于密集计算型任务，线程数跟CPU核心数量一样比较好。<br>还有，thread和pthread的速度也差不多。</p><h3 id="1-单线程"><a href="#1-单线程" class="headerlink" title="1.单线程"></a>1.单线程</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 900000000</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t start_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"开始时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> elapsed_seconds <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t end_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum     = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结束时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用    时: "</span> <span class="token operator">&lt;&lt;</span> elapsed_seconds<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2-std-thread"><a href="#2-std-thread" class="headerlink" title="2.std::thread"></a>2.std::thread</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> N <span class="token operator">=</span> <span class="token number">900000000</span><span class="token punctuation">;</span>mutex m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> from<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> to<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ret <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span><span class="token string">"线程ID："</span><span class="token operator">&lt;&lt;</span> this_thread<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token string">", ret="</span><span class="token operator">&lt;&lt;</span>ret<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CPU核心个数       : "</span> <span class="token operator">&lt;&lt;</span> thread<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入启动线程个数: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计时</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>future<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> result<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t start_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"开始时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">async</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> i<span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> elapsed_seconds <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t end_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum     = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结束时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用    时: "</span> <span class="token operator">&lt;&lt;</span> elapsed_seconds<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-pthread"><a href="#3-pthread" class="headerlink" title="3.pthread"></a>3.pthread</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> N <span class="token operator">=</span> <span class="token number">900000000</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a_t<span class="token punctuation">,</span> <span class="token operator">*</span>pa_t<span class="token punctuation">;</span>pthread_mutex_t mutex<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      pa_t at <span class="token operator">=</span> <span class="token punctuation">(</span>pa_t<span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> from <span class="token operator">=</span> at<span class="token operator">-></span>from<span class="token punctuation">,</span> to <span class="token operator">=</span> at<span class="token operator">-></span>to<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> from<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> to<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ret <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//cout &lt;&lt; "from = " &lt;&lt; from &lt;&lt; ", to = " &lt;&lt; to &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "ret = " &lt;&lt; ret &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt;"线程ID："&lt;&lt; pthread_self() &lt;&lt; "    sum="&lt;&lt;ret&lt;&lt; endl;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CPU核心个数       : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">sysconf</span><span class="token punctuation">(</span>_SC_NPROCESSORS_CONF<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入启动线程个数: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    pthread_t pthid<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> to<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计时</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t start_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"开始时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        a_t arg<span class="token punctuation">;</span>        arg<span class="token punctuation">.</span>from <span class="token operator">=</span> i<span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">;</span>        arg<span class="token punctuation">.</span>to <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pthid   = "</span><span class="token operator">&lt;&lt;</span> pthid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span>  <span class="token string">", ret = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> elapsed_seconds <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t end_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum     = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结束时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用    时: "</span> <span class="token operator">&lt;&lt;</span> elapsed_seconds<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> C++ </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东面试风波之后续</title>
      <link href="/2019/09/06/interview4/"/>
      <url>/2019/09/06/interview4/</url>
      
        <content type="html"><![CDATA[<p>其实我知道，即使我通过了所有面试，进入池子里面，大概率也会被刷。但是那至少是合理的流程, 如果那样，我会心服口服。<br><span id="more"></span></p><p>前面说了，京东校招组给我回复了邮件。但我没有给他（她）回复，一是不知道说什么，二是我觉得我说什么其实都没什么用了。<br>我是几乎肯定以为他们会以怎样圆滑的方式来说服我接受这个结果。最小概率的情况，也是我仅有的一丝丝希望，就是我还能有机会进入京东最终的备胎池里。</p><p>但又觉得，如果那样，又有种奇怪的感觉。就好像买东西，有很多顾客买到了假货（或者说是有瑕疵的货物），只有我去找店家理论了，最终店家也只给我一个人换了货。<br>我的本意并不是这样。我的确很缺这样的机会，但我更在意的是，一件事情是否公平合理，何况这是与我极其相关的一件事。</p><p>杜甫有一句话，可能我不配说，但那话说的真好，大家也都知道，“安得广厦千万间，大庇天下寒士俱欢颜”。遇到一件事，不能只想到自己。</p><p>废话不多说了，说结果吧。</p><p>今天从西安回来的高铁上，接到京东校招组一位工作人员的电话，因为车上信号不稳定，就说好下车后我再打给她。</p><p>经历高铁加地铁，回到宿舍我才回电话，这时已经是两个小时后。她跟我详细说明了情况，并解释说是HR搞错了他们公司校招的原则，并不存在所谓“但凡是有工作经历的人就不能参加他们的校招”的说法，也跟复试面试官核实了我前面的面试没什么问题。</p><p>如下图所示，hr应该是误解了应届生身份的问题。<br><img src="/images/jd_help.png" alt="京东帮助"></p><p>她讲到这里，其实我就明白了。跟我原来想的那一丝丝希望是如此的相像。她说给我改了状态。还是很开心的，只是我没有太表现出来。不过，她也解释了后续还会进行筛选，我说我了解的。</p><p>临了，她也很客气说，有事随时可以联系她。我说，好的谢谢你。</p><p>我该高兴的，但并不稳，甚至可以说非常不稳，所以又高兴不起来。</p><p>好累啊，有希望却希望不大。</p><p>晚上，又收到滴滴的面试邀请，过几天还得去西安。钱包咕咕在叫了。</p><p>最后，我去查了状态，果然变了哈<br><img src="/images/jd_status.png" alt="京东面试结果"></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 2020校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东HR面挂——一个出乎所有人意料的原因</title>
      <link href="/2019/09/05/jdinterview3/"/>
      <url>/2019/09/05/jdinterview3/</url>
      
        <content type="html"><![CDATA[<p>9月3号早上面试后，我因为答得还不错，所以心情很好，以为京东稳了。后来在牛客网了解到京东HR面还要刷不少人，才觉得事情不妙，<br>但仍觉得应该问题不大。事实证明我还是太过于自信了。<br><span id="more"></span></p><p>中间还有很多插曲，太复杂就不详述了，直接说结果吧。HR面试完（电面），我还觉得回答的不错，应该问题不大，准备跟室友出去吃饭。顺手刷新了一下京东校招官网的状态，<br>醒目的灰色的令人沮丧的“HR面试未通过映入眼帘”，还没等室友看到，我就迅速关掉了网页。因为实在想不通为什么会被挂，所以我就给HR发了短信询问（没有打电话是怕打扰她，<br>也担心我情绪过于激动，表述不当）。</p><p>我以为就这样石沉大海了，没想到的是，没过多久，HR就打电话过来了。她解释说是因为我有几年的工作经历，所以是不能参加他们的校招的。<br>我表示很惊讶，简直闻所未闻，以前真没听说过还有这样的说法！然后，HR说前面两轮面试我表现的不错，但很可惜，由于这个原因无法给我通过。还说我可以参加社招。最后，可能是看我<br>还是难以接受，她说我可以发邮件跟京东校招组反馈这个事情。然后，谢谢再见，挂了电话。</p><p>这个时候，心情好了一些。说实话HR打电话过来我还挺惊讶的，她人真的挺好的。后来我跟室友也说了这个情况，大家好一阵感慨，甚至有些打退堂鼓：秋招怎么这么难啊？！不如回家种田算了！</p><p>不过抱怨归抱怨，我想了想，还真应该跟京东校招组反馈一下。就算说了没有用，我也要说，因为真的不合理。写了有几百字，详细陈述了这个事情，自认为言辞还算恳切，点击发送。仍然做好<br>石沉大海不被回复的准备。</p><p>后来去参加宣讲会，人真的超级超级多。找工作太难了。还要再努力点才行。</p><p>大概到了晚上，京东校招组回复邮件了。说会了解情况再给我回复，但其实我不抱什么希望了。</p><p>其实我也不是有多优秀，所有可能我压根配不上去大厂吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 2020校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东二面</title>
      <link href="/2019/09/03/jdinterview2/"/>
      <url>/2019/09/03/jdinterview2/</url>
      
        <content type="html"><![CDATA[<p>幸运进入复试，还是通知去现场面，我又申请远程，然后面试官给我发邮件，说加微信面试。在牛客网看到有人说申请远程面试被拒绝，看来我还是幸运的，碰到的面试官都很好。<br><span id="more"></span></p><p>快到约定时间的时候，面试官发短信说延迟十到十五分钟，后来又说随时联系我。</p><p>大概9点半，开始面试。</p><ul><li>1.STL的底层实现，是不是线程安全的</li><li>2.int a[256]; char b[256]; sizeof(a), sizeof(b)分别是多大</li><li>3.vector底层实现</li></ul><p>然后，面试官说，来做道题吧。</p><ul><li>4.手写一个queue。10min</li></ul><p>写好后，拍照片，发给他，然后解释(手写程序，真的很乱)。</p><p>然后，面试官说，那再来一道吧。</p><ul><li>5.有n个数组，每个数组有m个升序排好的数，将所有数排序。15min</li></ul><p>我的方法复杂度是O(m*n<sup>2</sup>)，然后他问可以优化吗，我说可以用堆排序(其实建个堆就行，不需要堆排序)优化，又问具体怎么做……<br>其实我没想清楚都，最后在他提示下才明白，建个堆就好，复杂度提高到O(m*n*logn)。</p><p>然后面试官说就到这里。好突然的感觉</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020校招 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东一面</title>
      <link href="/2019/09/01/jdinterview/"/>
      <url>/2019/09/01/jdinterview/</url>
      
        <content type="html"><![CDATA[<p>笔试做的一般，编程两道都没AC。运气好还是收到了京东的面试通知，很惊讶，又暗自叹息恐怕还是抓不住。但也要加油啊。</p><span id="more"></span><p>时间很快来到9月1号早上，面试官的电话如约而至，甚至还提前了几分钟。</p><p>不出意外，一面问的很基础，总体答的还行，裸面居然挺过来了。可我自知，如果再问深一点，可能就答不上来了。</p><p>临了说应该会有后续通知，我想我得再突击一下了。</p><p>下面简单总结一下面试的知识点：</p><ul><li>1.new和malloc(这个几乎逢面必问, 没认真总结过，总感觉每次都说的不全)</li><li>2.new申请内存失败返回什么，malloc呢</li><li>3.在C++里，struct和class的区别</li><li>4.static的作用</li><li>5.如何理解static变量具有文件作用域</li><li>6.C++里的多态</li><li>7.虚函数</li><li>8.虚函数底层实现, 以及如何实现多态的</li><li>9.fread, fwrite, fprintf 区别</li><li>10.线程锁(我答了互斥锁，读写锁，他说还有自旋锁，我说没有用过, 看来知识还是要知道全才好)</li><li>11.explicit, 举例, 我举了string str = “hello”;这个, 他问explicit加在哪里，记不清了，我就说复制构造，他说构造函数，好吧</li><li>12.大端和小端，什么时候需要注意</li><li>13.知道哪些排序，说了快排、堆排序、归并，稳定的含义，哪些是稳定的</li><li>14.c里的哪些函数(比如random)可以在多线程里用</li><li>15.可重入函数，直接说了不了解</li><li>16.STL里有哪些序列容器, vector和list的区别</li><li>17.linux命令，查找当前文件夹及子文件夹下，三天内修改过的文件，我说用find，他就不让说了???</li><li>18.最后问项目里我负责哪些部分，我说去重和倒排索引，简单说了说，没聊太深(太深我也记不清了)</li><li>19.(补一个)软连接和硬链接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团面试</title>
      <link href="/2019/08/27/meituan-interview/"/>
      <url>/2019/08/27/meituan-interview/</url>
      
        <content type="html"><![CDATA[<p><strong>后续</strong>：二面很惨，不说了，学习去了QAQ</p><span id="more"></span><p><strong>背景</strong>：投了之后也没管，可能是内推，然后周五下午突然接到电话，约电话面试，问我哪天有空，惊讶+紧张之余，我说要不就明天吧(我怕拖太久机会溜走了，毕竟是秋招的第一个面试啊),<br>    然后他说明天周末啊，我们(美团)周末休息，约工作时间吧，那我说下周一吧，他说那好，周一早上10点半行吧，我说好。挂了电话才想起了周末有浦发的面试，要去西安，周一早上赶回来没多少时间准备了。瞬间觉得完了，但也不好意思打电话改时间了。<br>    就想硬着头皮上吧。</p><p>这还没完呢，周六是京东的笔试，周末是快手和头条的笔试。周末去西安的高铁上还做了几套快手往年的笔试题，然后紧赶慢赶提前到达面试地点，还算顺利地面试完，下午4点半，刚好快手的笔试开始，可是没有找到有网的地方，只能放弃。后来找了家网吧，等到7点做了头条的笔试。然后去西安城墙看了看，就坐火车回学校了。</p><p>然后本来8点到站的火车晚点了一个小时，绿皮火车真是卑微啊，都快到站了，也没有资格进站，要在一个小站苦等。等的时候，有几个女声跟乘务员说她们到站还要转火车，赶不上的话怎么改签，乘务员欢快地回应说你们去7车找列车长说, 要不怎么体现他列车长的作用。等的时候无聊，我也简单看了下面经，想着回去应该还有时间看看基础知识。到站后下车出站，还下雨了，赶上公交，吃了早饭，9点半赶回宿舍。跟室友唠了两句，然后讨论头一天的头条编程题，突然接到电话，是那个熟悉的号码，心想惨了，一点没准备啊（这时才10点05分左右）。这一面就是一个小时。</p><p>面试时随便记在一张纸上，所以比较乱。</p><p>一面(电面)</p><ul><li>1.自我介绍</li><li>2.malloc与new</li><li>3.先问知不知道C++11,我说知道点，然后问了智能指针, 说了share_ptr,weak_ptr, 问share_ptr跟普通指针比有什么优点，说了更安全，问还有什么，我说不知道了</li><li>4.问会不会STL,我说会一点, 然后问map和multimap, multimap的底层实现, 我说都是他们红黑树，但不知道multimap具体怎么实现,<br>  然后问如果是我会怎么去实现，我说对相等节点建立开链来实现。(回头好好看看STL去)</li><li>5.平衡树(应该就是指AVL)和红黑树, 为什么红黑树应用更广泛</li><li>6.完全二叉树和满二叉树，这里还有点插曲，我说满二叉树节点数2^n-1, 他说不对，然后说后面看书上怎么说，也可能他记错了(后来证明就是他错了)</li><li>7.堆排序过程</li><li>8.TCP三次握手, 以及为什么必须有第三次的ACK. 然后接着还问了全双工, 半双工和单工</li><li>9.计算机网络各个协议的端口号，这个没答出来，TCP的都忘了……我说TCP的记不清了，FTP的是20,21，HTTP的是80（其实模模糊糊的也不知道对不对）</li><li>10.进程和线程的区别, 多线程相对于多进程的优势和缺点，缺点我说了多线程，当其中一个线程挂掉，该线程所属进程就会挂掉，问为什么，我说不知道..</li><li>11.多线程，读多写少的情况（比如平均读1000次写1次）怎么处理。后来实在不会, 问我知道读写锁吗，我说知道，但不会用, 说可以去了解下+-+</li><li>12.然后结合项目问，客户端连接服务器的时候，能ping通但是连不上服务器, 会是什么原因？答有可能到最大连接数了，问还有呢？不知道，最后他问我知道防火墙吗，我说听说过，但不清楚原理，然后他还给我解释了一下</li><li>13.客户端给服务器发送数据(send)的时候，突然服务器断开，此时send返回什么, 记不清了，我答的是要么0要么-1</li><li>14.signal</li><li>15.epoll</li><li><p>16.socket阻塞与非阻塞, 这个真忘了，没说出来，他说没事，如果想不起来的也不要瞎说，瞎说反而给面试官印象不好</p></li><li><p>最后问我有什么问题，就简单问了他们的面试批次什么的</p></li><li><p>然后下午还在睡觉，就来电话，没接到，我又打过去，没通，又打过来，说我过了，下一面是视频面，约个时间，我说那周四吧，说那好周四上午10点半。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 2020校招 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Rebase的用法</title>
      <link href="/2019/08/18/rebase/"/>
      <url>/2019/08/18/rebase/</url>
      
        <content type="html"><![CDATA[<p>其实我用Git不多，<code>git rebase</code>命令之前也都没听说过，偶然在牛客网看面经看到有人说面试官问<code>git rebase</code>和<code>git merge</code>的区别。才想到去了解一下它。</p><span id="more"></span><p>廖雪峰的官方网站上有提到<code>git rebase</code>的用法<sup>[1]</sup>，并举了一个例子，但他的例子不好，评论里也有人说到。<br>评论里有位同学详细说了<code>git rebase</code>的用法, 说得很好, 摘抄如下：</p><hr><p>一开始按照教程演示去操作，因为两个目录修改的不是同一文件，<code>git pull</code> 后直接合并了没有冲突，所以git rebase有效果。如果<code>git pull</code>后提示有冲突后，先不管冲突的代码，因为修改后执行rebase还是变回有冲突的代码。先执行<code>git add .</code>和<code>git commit -m &#39;xxx&#39;</code>。在执行git rebase 终端提示：Resolve all conflicts manually, mark them as resolved with “git add/rm &lt;conflicted_files&gt;”, then run “git rebase –continue”。这时再手动修改代码解决冲突，执行<code>git add .</code> 再执行 <code>git rebase --continue</code>就有效果了。这时直接<code>git push</code>到远程仓库即可</p><hr><p>按照廖雪峰以及那位同学的评论还有Git官网文档，我总结一下<code>git rebase</code>的用法</p><h2 id="什么时候用到git-rebase"><a href="#什么时候用到git-rebase" class="headerlink" title="什么时候用到git rebase"></a>什么时候用到<code>git rebase</code></h2><p>当多人在同一个分支协作时，后push的同学需要先<code>git pull</code>，如果出现冲突，还要先处理合并文件，然后再push, 这时就算merge完成了，然后你通过<code>git log --graph --pretty-oneline --abbrev-commit</code>查看提交历史，会发现提交历史有分叉, 初一看有点眼花缭乱的感觉。而<code>git rebase</code>通过一系列操作, 可以将提交历史改为一条直线, 看起来清晰一点。</p><h2 id="git-rebase的用法"><a href="#git-rebase的用法" class="headerlink" title="git rebase的用法"></a><code>git rebase</code>的用法</h2><p><strong>第一种情况: 修改的不是同一个文件</strong>，执行<code>git pull</code>后没有冲突，接着直接执行<code>git rebase</code>就可以了。</p><p>第一种情况只需执行两条命令:</p><pre class=" language-c"><code class="language-c">git pullgit rebase</code></pre><p><strong>第二种情况: 修改同一个文件, 出现冲突</strong>，这时执行<code>git pull</code>后，会显示需要你手动更改冲突文件，先不要改，而是先执行<code>git add x</code>和<code>git commit -m &quot;y&quot;</code>, 然后再执行<code>git rebase</code>, 然后将冲突文件里的\&lt;\&lt;\&lt;\&lt;HEAD那些无关内容删掉即可, <strong>千万不要做其他改动</strong>，然后执行<code>git rebase --continue</code>就可以了。</p><p>第二种情况需要以下6步</p><pre class=" language-c"><code class="language-c">git pullgit add x <span class="token comment" spellcheck="true">//x是冲突文件</span>git commit <span class="token operator">-</span>m <span class="token string">"y"</span> <span class="token comment" spellcheck="true">//y是那个什么</span>git rebase将冲突文件里的<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span>HEAD那些无关内容删掉git rebase <span class="token operator">--</span><span class="token keyword">continue</span></code></pre><p>参考：</p><p>[1] <a href="https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648">廖雪峰的官方网站_Git教程_Rebase及评论区</a></p><p>[2] <a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git官方文档之分支-变基</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七月刚来，已经走远</title>
      <link href="/2019/07/07/july/"/>
      <url>/2019/07/07/july/</url>
      
        <content type="html"><![CDATA[<p>明天回家。<br><span id="more"></span></p><p>本来准备7月5号回家的，9号去参加同学的婚礼，顺利的话中间还能去趟洛阳。<br>可是4号一大早被老师喊去实验室，一忙就是整整4天。<br>除了实验室的事情，这几天就是折腾系统，其他啥也没干。<br>之前的deepin系统（也就是现在在用的）总算是迁移到了新电脑上。以后就少折腾系统，挺麻烦的，也没啥意义。<br>win10也碰到个问题，不过已经解决，这里就不说了。</p><p>可能七月底才能回学校，而且那时实验室还不一定能装修好，所以可能还是得去图书馆学习。<br>一定要去图书馆。<br>过去的俩月没怎么取图书馆，几乎等于荒废了，在宿舍的学习效率太低了。<br>亡羊补牢，为时不晚。<br>在家也要保持状态，比如刷个题什么的，每天一两个小时就可以。</p><p>Fighting</p><p>ps : 对了，有个地方可以说一下，Deepin clone克隆后的系统，跟原系统相当于是一个系统。<br>比如：他们的Github仓库就是共用的；两个系统同时引导，克隆系统会把原系统覆盖掉。还不错。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nc出问题了吗，老是Connection Refused</title>
      <link href="/2019/06/30/nc-Connection-refused/"/>
      <url>/2019/06/30/nc-Connection-refused/</url>
      
        <content type="html"><![CDATA[<p><strong>已解决</strong></p><span id="more"></span><p>原来是没有加-p的原因，估计是deepin装的netcat版本太老了。<br>解决办法: 启动nc服务的时候在端口号前加上-p参数:<code>nc -l -p 2000</code>，就可以了。</p><p>以下是原文：</p><p>执行以下最简单的命令：</p><pre class=" language-shell"><code class="language-shell">nc -l 2000nc 192.168.1.101 2000</code></pre><p>就出现这个错误:<br><code>(UNKNOWN) [192.168.1.101] 2000 (cisco-sccp) : Connection refused</code></p><p>在虚拟机上试了，还是同样的错误。</p><p>启动我自己写的ftp server</p><p><code>./server 192.168.1.101 2000 5 10</code></p><p>再执行</p><p><code>nc 192.168.1.101 2000</code></p><p>可以连接成功。</p><p>但先执行</p><p><code>nc -l 2000</code></p><p>再启动ftp client</p><p><code>./client 192.168.1.101 2000</code></p><p>仍会出现上面的错误。</p><p>所以推测应该是nc的服务器没有正常启动或者类似的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>克隆Deepin系统</title>
      <link href="/2019/06/27/cloneDeepin/"/>
      <url>/2019/06/27/cloneDeepin/</url>
      
        <content type="html"><![CDATA[<p>换了新电脑，就想把原来的系统迁移到新电脑上，毕竟新配置一个系统还是挺麻烦的。在论坛搜了一下，看到有说可以clone分区。然后就试了试，开始遇到一些问题，不过后来还是成功了。<br><span id="more"></span></p><p>想看具体步骤可以跳转到<a href="#实施步骤">实施步骤</a>，或者<a href="#精简版">精简版</a> 。</p><p>新电脑是AMD锐龙处理器，自带Windows10，原Deepin系统是在大小110G左右的固态硬盘上，需要把它克隆到一个238G左右的移动固态硬盘。</p><p>然后就遇到一个问题：克隆完成后，将238G的硬盘连到新电脑，无法从该硬盘启动，Boot Device只显示电脑自带的硬盘而不显示外接硬盘，不知道是新电脑的问题还是锐龙处理器的问题，总之就是没办法启动克隆的系统。</p><p>所谓兵来将挡水来土掩，问题总是有解决的办法，很快就想到一个：那就是在电脑自带的硬盘安装一个Deepin系统，由它来引导。果不其然，安装好以后，再启动的时候就可以看到238G硬盘上的系统了，启动它也没什么问题。这样，克隆系统就大功告成。</p><p>ps : 一直以来，我都是用Windows10+Deepin双系统，efi引导启动(引导这块不太懂，我是先装好Windows10，再安装Deepin，然后开机就看到引导界面了，所以应该是Deepin自带的引导程序)。</p><p>至于，为什么我不用Deepin 15.10(以下简称15.10)了？其实先前是打算趁这次换电脑改用Deepin 15.10而放弃原来的Deepin 15.9(下称15.9)的(从15.5开始用，一路升级到15.9)，因为15.10是第一个stable版本，而且原来的unstable版本官方好像是今年7月以后不再更新了。</p><p>所以新电脑一到，我就在238G移动固态上安装了15.10，一开始没发现什么大问题，只是<strong>引导有点问题</strong>：每次从Windows10重启，无法正常进入引导界面。这也许是本地硬盘Windows10+移动硬盘Deepin的问题，也可能是AMD处理器的问题。</p><p>另外，在安装一个vim插件的时候（vim-instant-markdown），需要安装nodejs，而在15.10安装nodejs默认版本是4.8，在15.9安装是8.11，不知道是不是由于这个原因，总之结果就是<strong>vim-instant-markdown在15.10用不了</strong>，尝试了各种方法结果还是不行。</p><p>综上，我就决定暂时放弃15.10了，虽然[解决办法]里在新电脑自带硬盘安装的系统是15.10，但那只是工具而已，以后的主力系统还是15.9。或许以后还有机会再用15.10或者别的linux系统。</p><h3 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h3><p>大致说一下实施步骤，因为我先后尝试了多次，所以这里就不赘述，只说我认为是必要的步骤，如果遇到问题，欢迎留言交流。</p><ul><li><p>1.准备工作</p><ul><li><p>原始系统，简称<strong>Deepin-老大</strong>；目标系统，也就是克隆系统，简称<strong>Deepin-小二</strong>。</p></li><li><p>一个第三方Deepin系统（我是在另一个移动机械硬盘上安装过一个Deepin 15.7，正好派上用场），简称<strong>Deepin-小三</strong>。<br>用live系统应该也可以，不过我没有试。如果在Deepin-老大上执行clone操作的话，会提示有个错误，好像是让你重启进入live系统再clone（我第一次是这样弄的，记不太清了，后来都是在第三方系统clone的）。</p></li><li><p>安装Clone软件（中文名是备份还原工具），在深度商店里就有。</p></li><li><p>在新电脑自带硬盘压缩出一个60G大小的空间并新建分区（这个过程是在自带Windows10系统进行），安装Deepin系统，简称<strong>Deepin-小四</strong>。</p></li></ul></li><li><p>2.克隆系统</p></li></ul><p>打开Clone软件，第一步选择操作介质: 分区，选择介质对应的操作: 克隆分区，然后点击下一步，选择原始分区和目标分区，点击开始克隆，等待完成。</p><ul><li>3.在新电脑启动</li></ul><p>克隆完成后，建议就转移到新电脑，先启动<strong>Deepin-小四</strong>，执行命令<code>sudo update-grub</code>，然后重启就可以进入引导界面，并发现里面有<strong>Deepin-小二</strong>，就说明克隆成功了。</p><p>之所以不建议在旧电脑启动<strong>Deepin-小二</strong>，是因为在旧电脑，<strong>Deepin-老大</strong>和<strong>Deepin-小二</strong>同时存在，引导程序可能对他们在识别上有点问题。<br>我在<strong>Deepin-小三</strong>执行<code>sudo update-grub</code>后，引导程序的确发现了这两个在不同位置的一模一样的系统，但启动的时候不论点击哪一个，似乎启动的都是原来的<strong>Deepin-小二</strong>，应该是<strong>Deepin-小二</strong>把<strong>Deepin-老大</strong>给覆盖了。</p><p>ps : 晚上我又测试了一下，把原系统升级了，15.9.3 unstable –&gt; 15.10.1 stable，看来Deepin支持从unstable直接升级到stable版本了。还有就是升级过后，把<strong>Deepin-小二</strong>和<strong>Deepin-老大</strong>放到一起，开机，系统久久不能启动，大概维持了5分钟。<br>然后，我觉得情况不对劲，就强制关机，把<strong>Deepin-小二</strong>放到新电脑上，开机，提示有些错误，然后执行检查，最后很快正常启动。看来那5分钟旧电脑还是做了些什么，试图区分老大和小二。还好我及时制止了，不然可能要出大事的(认真脸)。<br>算了算了，以后他们还是不要相见了，这让我想起一个电影，好像是叫做《月球》，挺悲伤的。关于克隆，确实有些东西让人（系统）难以接受。</p><ul><li>4.解决Deepin-小二分区大小问题</li></ul><p>启动<strong>Deepin-小二</strong>后，你也许会发现这个问题：<code>df -h</code>命令的结果显示，系统盘大小是110G（原系统Deepin-老大所在分区的大小），而<code>sudo fdisk -l</code>命令显示系统盘分区大小是238G（就是克隆操作目标硬盘的大小）。</p><p>那些多余的空间去哪了？能不能找回来呢？答案是可以！</p><p>只需要执行如下命令：</p><p><code>sudo resize2fs /dev/sda1</code></p><p>其中<code>/dev/sda1</code>是系统<strong>Deepin-小二</strong>所在的分区名字。</p><ul><li>5.领衔主演</li></ul><table><thead><tr><th style="text-align:center">姓名</th><th style="text-align:center">版本</th><th style="text-align:center">系统盘大小</th></tr></thead><tbody><tr><td style="text-align:center">Deepin-老大</td><td style="text-align:center">15.9.3</td><td style="text-align:center">110G</td></tr><tr><td style="text-align:center">Deepin-小二</td><td style="text-align:center">15.9.3</td><td style="text-align:center">238G</td></tr><tr><td style="text-align:center">Deepin-小三</td><td style="text-align:center">15.7.0</td><td style="text-align:center">80G</td></tr><tr><td style="text-align:center">Deepin-小四</td><td style="text-align:center">15.10.1</td><td style="text-align:center">60G</td></tr></tbody></table><h3 id="精简版"><a href="#精简版" class="headerlink" title="精简版"></a>精简版</h3><ul><li>1.在第三方系统上，使用Clone软件将待克隆系统从原始分区克隆到目标分区。</li><li>2.启动克隆系统后，执行<code>sudo resize2fs /dev/sda1</code>，其中<code>/dev/sda1</code>是克隆系统所在的分区名字。</li><li><strong>注意</strong>：不要在原电脑启动克隆系统</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有一些别的办法克隆系统，比如先备份，再还原，不再一一尝试啦，毕竟系统只是工具，弄好了就该办正事了，这才是最重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命名空间Namespace数据成员重复定义问题</title>
      <link href="/2019/04/23/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4namespace%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/23/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4namespace%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>C++ Primer终于快看完了。<br><span id="more"></span><br>真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。<br>文件：</p><ul><li>np.h<br><code>`</code>c<br>#ifndef <strong>NP_H</strong><br>#define <strong>NP_H</strong> </li></ul><p>#include <iostream></p><p>namespace np{<br>    class NpTest{<br>    public:<br>        void print();<br>    private:<br>        int val = 2;<br>    };</p><pre><code>void add(int &amp;);//int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)namespace&#123;    int np_val;&#125;</code></pre><p>}</p><p>#endif</p><pre><code>* np.cpp```c#include &quot;np.h&quot;#include &lt;iostream&gt;using namespace np;namespace np&#123;    void NpTest::print()&#123;        std::cout &lt;&lt; &quot;val = &quot; &lt;&lt; val &lt;&lt; std::endl;    &#125;    void add(int &amp;a)&#123;        ++a;    &#125;&#125;</code></pre><ul><li>main.cpp<br><code>`</code>c<br>#include “np.h”<br>#include <iostream><br>using namespace std;<br>using namespace np;</li></ul><p>namespace np1{<br>    int np_val = 10;<br>}<br>namespace np1{<br>    void test(){<br>        ++np_val;<br>    }<br>}</p><p>int main(){<br>    NpTest a;<br>    a.print();<br>    int x = 1;<br>    add(x);<br>    cout &lt;&lt; x &lt;&lt; endl;<br>    np::np_val = 100;<br>    cout &lt;&lt; np::np_val &lt;&lt; endl;<br>    cout &lt;&lt; np1::np_val &lt;&lt; endl;<br>    np1::test();<br>    cout &lt;&lt; np1::np_val &lt;&lt; endl;<br>    return 0;<br>}<br><code>`</code><br>Problem: 其实就是注释的那一行，np_val存在重复定义问题。<br>就是每当np.h被include一次，np_val就被定义一次。<br>但是改成把np_val放到嵌套的匿名空间里就没有问题了。<br>现在还不太理解原因，待后面再看看。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>木夕的诗</title>
      <link href="/2019/04/10/mjpoet/"/>
      <url>/2019/04/10/mjpoet/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/sunset.jpg" alt="sunset"></p><p>一些旧诗<br><span id="more"></span></p><h6 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h6><p><a href="#夜思">夜思(2009.10.01于海口)</a><br><a href=""></a><br><a href=""></a><br><a href=""></a></p><h6 id="夜思"><a href="#夜思" class="headerlink" title="夜思"></a>夜思</h6><p>2009.10.01 于海口<br>黛入秋空忽夜半，窗台露水月如弓。<br>风冲雾里花滴落，雨撞墙根草速生。<br>语逸心烦德不事，情闲意乱道难清。<br>方思铁血南疆撒，岂敢从心荡鼓钟。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饮酒</title>
      <link href="/2019/03/31/drink/"/>
      <url>/2019/03/31/drink/</url>
      
        <content type="html"><![CDATA[<h1 id="饮酒"><a href="#饮酒" class="headerlink" title="饮酒"></a>饮酒</h1><p>陶渊明</p><p>结庐在人境，而无车马喧。<br>问君何能尔？心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧照片</title>
      <link href="/2019/03/30/oldPhotos/"/>
      <url>/2019/03/30/oldPhotos/</url>
      
        <content type="html"><![CDATA[<h1 id="一些照片"><a href="#一些照片" class="headerlink" title="一些照片"></a>一些照片</h1><span id="more"></span><p><img src="/myPhoto/20140930_115321.jpg" alt=""><br><img src="/myPhoto/DSC00483.JPG" alt=""><br><img src="/myPhoto/DSC00484.JPG" alt=""><br><img src="/myPhoto/DSC00485.JPG" alt=""><br><img src="/myPhoto/DSC00486.JPG" alt=""><br><img src="/myPhoto/DSC00487.JPG" alt=""><br><img src="/myPhoto/DSC_0134.JPG" alt=""><br><img src="/myPhoto/DSC_0240.JPG" alt=""><br><img src="/myPhoto/DSC_0248.JPG" alt=""><br><img src="/myPhoto/DSC_0254.JPG" alt=""><br><img src="/myPhoto/DSC_0255.JPG" alt=""><br><img src="/myPhoto/DSC_0274.JPG" alt=""><br><img src="/myPhoto/IMG20150626016.jpg" alt=""><br><img src="/myPhoto/1岁.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 照片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 照片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading</title>
      <link href="/2019/03/30/reading/"/>
      <url>/2019/03/30/reading/</url>
      
        <content type="html"><![CDATA[<p><img src="/myPhoto/DSC_0274.JPG" alt="pic"></p><h5 id="读书笔记-C-Primer"><a href="#读书笔记-C-Primer" class="headerlink" title="读书笔记 C++ Primer"></a>读书笔记 C++ Primer</h5><p>这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。<br>越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。<br>不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……<br>其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。</p><span id="more"></span><h5 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h5><p>相机一直在睡觉。</p><p>我的所谓爱好摄影何止是一句空话，简直是真空的。不过今天翻了翻相册，以前拍的照片，质量还不错的（比如文首所示），<br>它们也一直在睡觉。自从拍完回来，从手机或相机的存储卡里拷贝到电脑里，就再也没“惠顾”过他们！</p><p>其实有时间可以多出门拍拍照片，把这个爱好给坐实了！比如上次文学院的同学邀请，就可以去啊，虽然认识的方式略尴尬，但也无伤大雅。<br>也不是以找对象为纯粹目的的啊，做个朋友总是可以的。嗯，有时间问一下。</p><h5 id="找实习"><a href="#找实习" class="headerlink" title="找实习"></a>找实习</h5><p>参加了不少笔试，面试不多，面了的也一个都没过。现状是基础不牢、项目不精，要啥啥不行。还是补基础先。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>兰大双选会其实就是个大型招聘会，是挺不错的，不过跟我们专业关系不太大。</p><p>作息方面，基本上达到要求了，还需要长期坚持。尽量做到不玩手机，虽然现在已经玩的很少了，但还没有完全杜绝。</p><p>个人形象方面，既然丑的事实已经无法改变，那就只能接受，并在其他方面做出补充。比如健身，发型，衣着等等。<br>说到底，我还是一个在意外表的人。以前嘛，不修边幅，对长相还自信，所以也没啥。现在呢，要啥没啥了，天天跟裸奔一样，很不自在。<br>这一点亟待改善。</p><p>就说这么多吧，兰州最近的昼夜温差挺大的，不穿秋裤晚上还挺冷的！</p><p>2019,03,30 二月廿四 星期六</p><p>于兰州</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移到Hexo</title>
      <link href="/2019/03/29/blog-transfer-to-Hexo/"/>
      <url>/2019/03/29/blog-transfer-to-Hexo/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/path.jpg" alt="img"></p><p>把博客迁移到<a href="https://github.com/hexojs/hexo">hexo</a>了，主题是<a href="https://github.com/litten/hexo-theme-yilia">yilia</a>,<br>比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。<br>其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，<br><a href="https://www.jianshu.com/p/31744aa44824">这里是方法链接</a>。</p><span id="more"></span><p>然后，简单了解了一下Hexo的命令，就可以开始使用Hexo啦。原来需要<code>git add/commit/push</code>几条命令才能发布，<br>现在只需要一条命令(<code>hexo g -d</code>)就可以了。</p><p>下面简单说一下步骤。</p><ul><li>安装Node.js, Git</li><li>安装Hexo : <code>npm install hexo-cli -g</code></li><li>Setup your blog : <code>hexo init blog</code> </li><li>进入blog<code>cd blog</code>并下载主题 : <code>git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</code></li><li>选择主题<code>theme: yilia</code></li><li>配置<code>/blog/_config.yml</code><ul><li><code>new_post_name: year-:month-:day:title.md</code></li><li><code>deploy:</code><pre><code>  type: git  repository: git@github.com:yourname/yourname.github.io.git  branch: master</code></pre></li></ul></li><li>常用Hexo命令<ul><li>新建博客：<code>hexo new title</code></li><li>发布：<code>hexo g -d</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB and Make</title>
      <link href="/2019/03/25/gdb_make/"/>
      <url>/2019/03/25/gdb_make/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="">MySQL</a></li><li><a href="">Oracle</a></li><li><a href="">poi</a></li><li><a href="">epoll</a></li><li><a href="">redis</a></li><li><a href="">log4cpp</a></li><li><a href="">socket</a></li><li><a href="">C/S模式</a></li><li><a href="">C++, Java, Python</a></li><li><a href="">STL</a></li><li><a href="">Linux环境编程</a></li><li><a href="#GDB">GDB</a></li><li><a href="#Make">Make</a></li><li><a href="">多线程编程</a></li><li><a href="">git,github</a></li></ul><span id="more"></span><h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><ul><li>1.编译时加上-g<pre><code>$ g++ *.cpp -g</code></pre></li><li>2.执行时<pre><code>$ gdb a.out</code></pre>或者分两步<pre><code>$ gdb(gdb)file a.out</code></pre></li><li>命令</li></ul><table><thead><tr><th>命令</th><th>含义</th><th>对应windows</th></tr></thead><tbody><tr><td>l</td><td>显示代码</td><td></td></tr><tr><td>r</td><td>开始运行</td><td>F9</td></tr><tr><td>b 4</td><td>在第四行设置断点</td><td>F5</td></tr><tr><td>info b</td><td>查看所有断点</td><td></td></tr><tr><td>delete [断点号]</td><td>查看所有断点</td><td></td></tr><tr><td>n</td><td>下一步,不进入函数</td><td>F10</td></tr><tr><td>s</td><td>表示单步进入函数</td><td>F11</td></tr><tr><td>p i</td><td>打印变量i</td><td></td></tr><tr><td>c</td><td>继续运行,直到函数结束或遇到新的断点</td><td></td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h1 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h1><p>格式：</p><pre><code>target: dependency_files&lt; tab &gt; command</code></pre><p>.PHONY是Makefile文件的关键字，表示它后面列表中的目标均为伪目标。伪目标通常用在清理文件、强制重新编译等情况下</p><p>自定义文件名的话,比如makename执行时在后面加上-f makename</p><pre><code>make -f makename</code></pre><p><strong>变量函数与规则</strong></p><p>随着项目越来越大，源文件也越来越复杂，这个时候就要用到变量，写出通用性较强的makefile文件</p><h2 id="定义变量的两种方法"><a href="#定义变量的两种方法" class="headerlink" title="定义变量的两种方法"></a>定义变量的两种方法</h2><ul><li>1.变量名=变量值   递归变量展开（几个变量共享一个值） //不常用</li><li>2.变量名:=变量值  简单变量展开（类似于C++的赋值）    //常用</li></ul><p>变量分为; 用户自定义变量，预定义变量（CFLAGS），自动变量，环境变量</p><p>自动变量：指在使用的时候，自动用特定的值替换，常用的有: </p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>$@</td><td>当前规则的目标文件（重点）</td></tr><tr><td>$&lt;</td><td>当前规则的第一个依赖文件</td></tr><tr><td>$^</td><td>当前规则的所有依赖文件，以空格分隔（重点）</td></tr><tr><td>$?</td><td>规则中日期新于目标文件的所有相关文件列表，逗号分隔</td></tr><tr><td>$(@D)</td><td>目标文件的目录名部分</td></tr><tr><td>$(@F)</td><td>目标文件的文件名部分</td></tr></tbody></table><p>预定义变量：内部事先定义好的变量，但是它的值是固定的，并且有些的值是为空的。</p><ul><li>AR: 库文件打包程序默认为ar</li><li>AS: 汇编程序，默认为as</li><li>CC: c编译器默认为cc</li><li>CPP: C预编译器，默认为$(CC) -E</li><li>CXX: C++编译器，默认为g++</li><li>RM: 删除，默认为rm -f</li><li>ARFLAGS: 库选项，无默认</li><li>ASFLAGS: 汇编选项，无默认</li><li>CFLAGS: c编译器选项，无默认</li><li>CPPFLAGS: c预编译器选项，无默认</li><li>CXXFLAGS: c++编译器选项</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>1.wildcard : 搜索当前目录下的文件名，展开成一列所有符合由其参数描述的文件名，文件间以空格间隔。<br><code>SOURCES=$(wildcard *.cpp)</code>把当前目录下所有.cpp文件存入变量SOURCES里。</p></li><li><p>2.字符串替换函数: $(patsubst要查找的子串，替换后的目标子串，源字符串)。将源字符串(以空格分隔)中的<br>所有要查找的子串替换成目标子串。如OBJS=$(patsubst %.cpp,%.o,$(SOURCES))<br>把SOURCES中的.cpp替换为.o</p></li><li><p>3.$(addprefix 前缀，源字符串)函数把第二个参数列表的每一项前缀上第一个参数值???</p></li></ul><p>下面是一个较为通用的makefile:</p><pre class=" language-makefile"><code class="language-makefile">DIR      <span class="token operator">:=</span> ./debugEXE      <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/main.exeCC       <span class="token operator">:=</span> g++LIBS     <span class="token operator">:=</span>SRCS     <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.cpp<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.c<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.cc<span class="token punctuation">)</span>OCPP     <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %.cpp, <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/%.o, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.cpp<span class="token punctuation">)</span><span class="token punctuation">)</span>OC       <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %.c, <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/%.co, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.c<span class="token punctuation">)</span><span class="token punctuation">)</span>OCC      <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %.cc, <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/%.cco, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.cc<span class="token punctuation">)</span><span class="token punctuation">)</span>OCC      <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>OC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OCC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OCPP<span class="token punctuation">)</span>RM       <span class="token operator">:=</span> rm -rfCXXFLAGS <span class="token operator">:=</span> -Wall -g<span class="token symbol">start </span><span class="token punctuation">:</span> mkdebug <span class="token variable">$</span><span class="token punctuation">(</span>EXE<span class="token punctuation">)</span><span class="token symbol">mkdebug </span><span class="token punctuation">:</span>    <span class="token operator">@</span>if[! -d <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>]<span class="token punctuation">;</span> then mkdir <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span><span class="token punctuation">;</span> fi<span class="token punctuation">;</span><span class="token symbol"><span class="token variable">$</span>(EXE) </span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>addprefix -l, <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token symbol"><span class="token variable">$</span>(DIR)/%.o </span><span class="token punctuation">:</span> %.cpp    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token symbol"><span class="token variable">$</span>(DIR)/%.co </span><span class="token punctuation">:</span> %.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token symbol"><span class="token variable">$</span>(DIR)/%.cco </span><span class="token punctuation">:</span> %.cc    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token builtin">.PHONY</span><span class="token symbol"> </span><span class="token punctuation">:</span> clean rebuild<span class="token symbol">clean </span><span class="token punctuation">:</span>    <span class="token operator">@</span>D<span class="token variable">$</span><span class="token punctuation">(</span>RM<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/*.exe <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/*.o <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/*.co <span class="token variable">$</span><span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>/*.cco<span class="token symbol">rebuild </span><span class="token punctuation">:</span> clean start</code></pre><h2 id="make的命令行选项"><a href="#make的命令行选项" class="headerlink" title="make的命令行选项"></a>make的命令行选项</h2><table><thead><tr><th>命令格式</th><th>含义</th></tr></thead><tbody><tr><td>-C dir</td><td>读入指定目录下的makefile</td></tr><tr><td>-f file</td><td>读入当前目录下的file文件作为makefile</td></tr><tr><td>-i</td><td>忽略所有的命令行执行错误</td></tr><tr><td>-I dir</td><td>指定被包含的makefile所在目录</td></tr><tr><td>-n</td><td>只打印要执行的命令，但不执行这些命令</td></tr><tr><td>-p</td><td>显示make变量数据库和隐含规则</td></tr><tr><td>-s</td><td>在执行命令时不显示命令</td></tr><tr><td>-w</td><td>如果make在执行过程中改变目录, 则打印当前目录名</td></tr></tbody></table><h2 id="采用for循环编译多个目标文件的Makefile写法"><a href="#采用for循环编译多个目标文件的Makefile写法" class="headerlink" title="采用for循环编译多个目标文件的Makefile写法"></a>采用for循环编译多个目标文件的Makefile写法</h2><p>…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Find+wc统计代码行数(文件名含空格)</title>
      <link href="/2019/03/25/find_wc/"/>
      <url>/2019/03/25/find_wc/</url>
      
        <content type="html"><![CDATA[<p>一开始这样写<code>find . -name &quot;*.cpp&quot; | xargs wc -l</code>，名字有空格的文件无法处理</p><p>后来就在网上找，下面这个方法可以：</p><pre class=" language-shell"><code class="language-shell"><!-- more -->find . -name "*.cpp" -print0 | xargs -0 wc -l</code></pre><p>好像是把空格替换成’\0’了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令总结(持续更新)</title>
      <link href="/2019/03/18/linux_command/"/>
      <url>/2019/03/18/linux_command/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><span id="more"></span><table><thead><tr><th>命令</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>df -h</code></td><td>查看磁盘使用情况</td><td>磁盘</td></tr><tr><td><code>du -ah --max-depth==1</code></td><td>查看当前目录下的文件及文件夹的大小</td><td></td></tr><tr><td><code>du -sh</code></td><td>查看当前文件夹大小</td><td></td></tr><tr><td><code>ls -ltr</code></td><td>按修改时间排序</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件及文件夹个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^-&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^d&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件夹个数</td><td></td></tr><tr><td><code>free</code></td><td>查看内存使用情况</td><td>内存</td></tr><tr><td><code>top</code></td><td>实时显示系统运行各项信息，相当于任务管理器</td><td>cpu</td></tr><tr><td><code>ps -ef</code>&#124;<code>grep sth</code></td><td>查看当前运行进程</td><td></td></tr><tr><td><code>rename &#39;s/\.cc$/.cpp/&#39; *.cc</code></td><td>将后缀为.cc的文件后缀修改为.cpp</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/\s/./&#39; *.c</code></td><td>将后缀为.c的文件名中的空格替换为”.”</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/^/00/&#39; [0-9]*</code></td><td>将文件名以数字开头的文件前面加上00</td><td>批量修改文件名</td></tr><tr><td><code>history</code>&#124;<code>awk &#39;&#123;print $2&#125;&#39;</code>&#124;<code>sort</code>&#124;<code>uniq -c</code>&#124;<code>sort -rn</code>&#124;<code>head -15</code></td><td>查看使用频次前15的历史命令</td><td></td></tr><tr><td><code>linuxlogo</code></td><td></td><td></td></tr><tr><td><code>wc [filename]</code></td><td>统计指定文件中的行数、字数、字节数</td><td></td></tr><tr><td><code>usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]</code></td><td>修改用户名</td><td></td></tr><tr><td><code>ln</code></td><td>链接，软链接，硬链接</td><td></td></tr><tr><td><code>scp</code></td><td>linux之间文件远程传输</td><td></td></tr><tr><td><code>more</code></td><td>与cat类似，可以翻页浏览,空格键下一页，b回上一页</td><td></td></tr><tr><td><code>less</code></td><td>与more类似，还可以使用vi编辑查找</td><td></td></tr><tr><td><code>awk</code></td><td>AWK是一种处理文本文件的语言，是一个强大的文本分析工具</td><td></td></tr><tr><td><code>:%s/foo/bar/g</code></td><td>全文查找替换</td><td></td></tr><tr><td><code>gg=G</code></td><td>vim中代码智能对齐</td><td>vim</td></tr><tr><td><code>nl [file]</code></td><td>查看文件内容，行号计算不包括空行，相当于<code>cat [file] -b</code></td><td></td></tr><tr><td><code>:%!xxd</code></td><td>vim中显示16进制</td><td>vim</td></tr><tr><td><code>:%!xxd -r</code></td><td>vim中从16进制恢复</td><td>vim</td></tr><tr><td><code>sed -i &#39;1,6d&#39; *.cpp</code></td><td>删除所有cpp文件的前六行</td><td></td></tr><tr><td><code>find -mtime -3</code></td><td>查找3天以内修改过的文件</td><td>如果3前面没有-，意思是3天前修改的文件，还有类似的-atime,-mmin</td></tr><tr><td><code>:split</code>, <code>:vsplit</code></td><td>vim分屏</td><td>vim</td></tr><tr><td><code>ifconfig+端口+ip</code></td><td>修改该端口的ip</td><td></td></tr><tr><td><code>nl file</code>==<code>cat -b file</code></td><td></td><td></td></tr><tr><td><code>:%s/\d\+/\=submatch(0)-1/g</code></td><td>vim中数字批量减1</td><td>vim</td></tr><tr><td><code>:50,100s/hello//gn</code></td><td>统计从50行到100行hello出现的次数</td><td></td></tr><tr><td><code></code></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Epoll、Select与poll</title>
      <link href="/2019/03/09/epoll/"/>
      <url>/2019/03/09/epoll/</url>
      
        <content type="html"><![CDATA[<h1 id="1-epoll"><a href="#1-epoll" class="headerlink" title="1.epoll"></a>1.epoll</h1><p>epoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。</p><ul><li>首先，epoll使用一组函数来完成任务，而不是单个函数。</li><li>其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。</li><li>但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。<span id="more"></span></li><li>这个文件描述符使用<code>epoll_create</code>函数来创建：<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token keyword">int</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>size参数现在不起作用,只是给内核一个提示，告诉它事件表需要多大。</li><li><code>epoll_ctl</code>用来操作epoll的内核事件表。</li><li><p>epoll系列系统调用的主要接口是<code>epoll_wait</code>函数。</p></li><li><p>epoll对文件描述符的操作有两种模式：LT和ET</p><ul><li>LT（Level Trigger，电平触发）模式是默认的工作模式，在这种模式下epoll相当于一个效率较高的poll。</li><li>ET（Edge Trigger，边沿触发）模式是epoll的高效工作模式。</li></ul></li></ul><h1 id="2-poll"><a href="#2-poll" class="headerlink" title="2.poll"></a>2.poll</h1><p>poll系统调用和select类似，也是在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。poll的原型如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pollfd<span class="token operator">*</span> fds<span class="token punctuation">,</span> nfds_t nfds<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>fds参数是一个pollfd结构类型的数组，它指定所有我们感兴趣的文件描述符上发生的可读、可写和异常等事件。pollfd结构体的定义如下：<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> pollfd<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//文件描述符</span>  <span class="token keyword">short</span> events<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注册的事件</span>  <span class="token keyword">short</span> revents<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//实际发生的事件，由内核填充</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li></ul><h1 id="3-select"><a href="#3-select" class="headerlink" title="3.select"></a>3.select</h1><p>select的用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h></span></span><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> nfds<span class="token punctuation">,</span> fd_set<span class="token operator">*</span> readfds<span class="token punctuation">,</span> fd_set<span class="token operator">*</span> writefds<span class="token punctuation">,</span> fd_set<span class="token operator">*</span> exceptfds<span class="token punctuation">,</span> <span class="token keyword">struct</span> timeval<span class="token operator">*</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中：</p><ul><li>nfds参数指定被监听的文件描述符的总数。</li><li>readfds,writefds,exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符。</li><li>timeout参数用来设置select函数的超时时间。如果timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。</li></ul><table><thead><tr><th style="text-align:center">系统调用</th><th style="text-align:center">select</th><th style="text-align:center">poll</th><th style="text-align:center">epoll</th></tr></thead><tbody><tr><td style="text-align:center">事件集合</td><td style="text-align:center">用户通过3个参数<br>分别传入感兴趣的<br>可读、可写及异常<br>等事件，内核通过<br>对这些参数的在线<br>修改来反馈其中的<br>就绪事件。这使得<br>用户每次调用select<br>都要重置这<br>3个参数</td><td style="text-align:center">统一处理所有事件<br>类型，因此只需<br>一个事件集参数。用<br>户通过pollfd.events<br>传入感兴趣的事件，<br>内核通过修改<br>pollfd.revents反馈<br>其中就绪的事件</td><td style="text-align:center">内核通过一个事件表<br>直接管理用户感兴趣的<br>所有事件。因此每次<br>调用epoll_wait时，<br>无须反复传入用户感<br>兴趣的事件。epoll_wait<br>系统调用的参数events<br>仅用来反馈就绪的事件</td></tr><tr><td style="text-align:center">应用程序索引<br>就绪文件描述符<br>的时间复杂度</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">最大支持<br>文件描述符数</td><td style="text-align:center">一般有最大值限制，1024或2048</td><td style="text-align:center">65535</td><td style="text-align:center">65535</td></tr><tr><td style="text-align:center">工作模式</td><td style="text-align:center">LT</td><td style="text-align:center">LT</td><td style="text-align:center">LT,同时支持ET高效模式</td></tr><tr><td style="text-align:center">内核实现<br>和工作效率</td><td style="text-align:center">采用轮询方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(n)</td><td style="text-align:center">采用轮询方式<br>来检测就绪事件，<br>算法时间复杂度为<br>O(n)</td><td style="text-align:center">采用回调方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(1)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeedCode 37.Sudoku Solver</title>
      <link href="/2019/03/07/LeedCode_37_Sudoku_Solver/"/>
      <url>/2019/03/07/LeedCode_37_Sudoku_Solver/</url>
      
        <content type="html"><![CDATA[<h1 id="LeedCode-37-Sudoku-Solver"><a href="#LeedCode-37-Sudoku-Solver" class="headerlink" title="LeedCode 37.Sudoku Solver"></a>LeedCode 37.Sudoku Solver</h1><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><span id="more"></span><p>就是数独游戏</p><h1 id="解法思路"><a href="#解法思路" class="headerlink" title="解法思路"></a>解法思路</h1><p>把所有空位置找出来,并找到该位置可以填的数字的集合.针对每个空位置,把其集合中的数字依次填进去验证(这里采用递归):</p><pre><code>* 如果返回flase,就把该位置重新设为空,验证集合中的下一个数字* 直到递归完成,返回true</code></pre><h1 id="解法分析"><a href="#解法分析" class="headerlink" title="解法分析"></a>解法分析</h1><ul><li>方法1: 采用set\&lt;char>存储数字集合,Runtime: 248ms(unordered_set也差不多)</li><li>方法2: 采用vector\&lt;int>表示数字集合,Runtime: 36ms</li><li>方法3: 采用int,位运算表示数字集合,Runtime: 12ms</li><li>可见,能用简单数据结构实现还是最好的</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><p>方法1:</p><pre class=" language-c"><code class="language-c">class Solution <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>  <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  bool <span class="token function">solve</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> tmp<span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          tmp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          tmp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                          <span class="token keyword">int</span> ii <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token punctuation">;</span>                          <span class="token keyword">int</span> jj <span class="token operator">=</span> j<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>m<span class="token punctuation">;</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                              tmp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> tmp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                          board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span>                              <span class="token keyword">return</span> true<span class="token punctuation">;</span>                          <span class="token keyword">else</span>                              board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>                      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> false<span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li><li><p>方法2:</p><pre class=" language-c"><code class="language-c">class Solution <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>  <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  bool <span class="token function">solve</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          tmp<span class="token punctuation">[</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          tmp<span class="token punctuation">[</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          tmp<span class="token punctuation">[</span>board<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                          board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span>                              <span class="token keyword">return</span> true<span class="token punctuation">;</span>                          <span class="token keyword">else</span>                              board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>                      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> false<span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li><li><p>方法3:</p><pre class=" language-c"><code class="language-c">lass Solution <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>  <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  bool <span class="token function">solve</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0x1ff</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0x1ff</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> squ <span class="token operator">=</span> <span class="token number">0x1ff</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          row <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          col <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>k<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                          squ <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> k<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> k<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> flag <span class="token operator">=</span> row <span class="token operator">&amp;</span> col <span class="token operator">&amp;</span> squ<span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">,</span>flag<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                          board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span>                              <span class="token keyword">return</span> true<span class="token punctuation">;</span>                          <span class="token keyword">else</span>                              board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>                      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> false<span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 438.Find All Anagrams in a String</title>
      <link href="/2019/03/06/LeedCode_438/"/>
      <url>/2019/03/06/LeedCode_438/</url>
      
        <content type="html"><![CDATA[<h1 id="438-Find-All-Anagrams-in-a-String"><a href="#438-Find-All-Anagrams-in-a-String" class="headerlink" title="438.Find All Anagrams in a String"></a>438.Find All Anagrams in a String</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><span id="more"></span><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.</p><p>给定一个字符串s和一个非空字符串p，在s中查找p的变位词的所有起始索引。字符串仅由小写英文字母组成，字符串s和p的长度将不大于20,100。输出顺序无关紧要。 </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始，我只当是字符串匹配来做了，做出来发现最后一个超时，又加了KMP，还是超时。后来也有了想法，只是花太多时间了，就没有再去写，于是参考大神的解法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//解法1(没有AC，并且考虑不周全)：</span>class Solution <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> dict<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e <span class="token punctuation">:</span> p<span class="token punctuation">)</span>            dict<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            string tmp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout &lt;&lt; tmp &lt;&lt; endl;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> dict<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> tmp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i <span class="token operator">+</span><span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//解法2(滑动窗口)：</span>class Solution <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pv</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sv</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">++</span>pv<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">++</span>sv<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pv <span class="token operator">==</span> sv<span class="token punctuation">)</span>           res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">++</span>sv<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">--</span>sv<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>pv <span class="token operator">==</span> sv<span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列三种解法及时间复杂度分析</title>
      <link href="/2018/12/26/three_method_of_fibonacci/"/>
      <url>/2018/12/26/three_method_of_fibonacci/</url>
      
        <content type="html"><![CDATA[<h1 id="1-定义及递推公式"><a href="#1-定义及递推公式" class="headerlink" title="1.定义及递推公式"></a>1.定义及递推公式</h1><p>斐波那契数列(Fibonacci sequence),又称黄金分割数列，因数学家Leonardoda Fibonacci以兔子繁殖为例子而引入，故又称兔子数列。<br>1,1,2,3,5,8,13…<br>即：f(1) = 1,f(2) = 1,f(3) = 2,f(4) = 3…<br>添加0项后,Fibonacci数列归纳如下：<br><span id="more"></span></p><ul><li>f(n) = f(n-1) + f(n-2), n &gt;= 2;</li><li>f(0) = 0;</li><li>f(1) = 1;</li></ul><h1 id="2-通项公式"><a href="#2-通项公式" class="headerlink" title="2.通项公式"></a>2.通项公式</h1><p><img src="/images/fibonacci.jpg" alt="txgs"></p><h1 id="3-方法一：递归求解-时间复杂度O-2-n"><a href="#3-方法一：递归求解-时间复杂度O-2-n" class="headerlink" title="3.方法一：递归求解(时间复杂度O(2^n))"></a>3.方法一：递归求解(时间复杂度O(2^n))</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/images/fb4.png" alt="txgs"> <img src="/images/fbn.png" alt="txgs"></p><p>时间复杂度分析：可以看到,递归解法存在大量的重复计算。<br>求f(n)的过程可以用一颗二叉树表示,树中的每个节点就代表一次基本计算.<br>易知，树的高度为n，一棵高度为n的满二叉树的节点个数为2^n-1，当然，上图中的树肯定不是满二叉树，但也可以看出来，该树的节点个数<br>大于满二叉树节点数的一半,即（2^n-1)/2。设计算次数为T(n),可知(2^n-1)/2 &lt; T(n) &lt; 2^n-1.<br>因此该算法的时间复杂度为O(2^n).</p><p><strong><em>勘误</em></strong> ： 经评论提醒，关于斐波那契树的节点数说法有误，实际上，当n&gt;4时，斐波那契树的节点数小于对应满二叉树的一半。我大致推算了一下，斐波那契树的节点数的计算也与斐波那契数列有关，准确的说，与斐波那契数列的和有关。</p><p>根据斐波那契树, 每个斐波那契数的出现次数如下所示:</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token operator">*</span>f<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>f<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span>f<span class="token punctuation">(</span>n<span class="token number">-3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>f<span class="token punctuation">(</span>n<span class="token number">-4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> f<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">*</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> </code></pre><p>上式中的系数和即为斐波那契树的节点数之和。可以看出来，这些系数也是斐波那契数列，因此斐波那契树的节点数与斐波那契数列和有关。<br>而斐波那契数列是发散的，好像并没有求和公式，只有通项公式。不过通项公式与求和公式关系密切。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#设Sn为n阶斐波那契数列的和，则有如下公式：</span>Sn <span class="token operator">=</span> f<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span></code></pre><p>由通项公式方括号中的第一项，底数大约为1.6，第二项的底数为-0.6，n越大，第二项就越小，当n足够大，通项公式基本由第一项决定。那么，<br>可以推断，斐波那契树的节点数与1.6^n是同一数量级。也就是递归解法的时间复杂度为O(1.6^n), 而时间复杂度没有这种表示方法，进一步放大，就是O(2^n)。</p><h1 id="4-方法二：利用动态规划-dp-求解-时间复杂度O-n"><a href="#4-方法二：利用动态规划-dp-求解-时间复杂度O-n" class="headerlink" title="4.方法二：利用动态规划(dp)求解(时间复杂度O(n))"></a>4.方法二：利用动态规划(dp)求解(时间复杂度O(n))</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">fibonacci_dp</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>显然,动态规划解法的时间复杂度为O(n).</p><h1 id="5-方法三：利用矩阵求解-时间复杂度O-logn"><a href="#5-方法三：利用矩阵求解-时间复杂度O-logn" class="headerlink" title="5.方法三：利用矩阵求解(时间复杂度O(logn)"></a>5.方法三：利用矩阵求解(时间复杂度O(logn)</h1><pre class=" language-c"><code class="language-c">class Matrix<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">unsigned</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token operator">*</span><span class="token operator">*</span>m<span class="token punctuation">;</span>    <span class="token function">Matrix</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> num<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        m<span class="token operator">=</span>new <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>new <span class="token keyword">long</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        n<span class="token operator">=</span>num<span class="token punctuation">;</span>        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Matrix operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Matrix mtx<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Matrix</span><span class="token punctuation">(</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>mtx<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Matrix operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Matrix <span class="token operator">&amp;</span>mtx<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Matrix <span class="token function">result</span><span class="token punctuation">(</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>mtx<span class="token punctuation">.</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    result<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>mtx<span class="token punctuation">.</span>m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">fb_matrix</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    Matrix <span class="token function">first</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Matrix <span class="token function">result</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> t<span class="token operator">=</span>n<span class="token number">-2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token operator">=</span>result<span class="token operator">*</span>first<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        first<span class="token operator">=</span>first<span class="token operator">*</span>first<span class="token punctuation">;</span>        t<span class="token operator">=</span>t<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>result<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>根据递推公式可以得到<br><img src="/images/fibonacci_matrix.png" alt="matrix"><br>因而计算f(n)就简化为计算矩阵的(n-2)次方，而计算矩阵的(n-2)次方，又可以分解为计算矩阵的(n-2)/2次方的平方,逐步分解,直到(n-2)/(2^m)==1,因而时间复杂度为O(logn).<br>matrix解法的时间复杂度为O(logn).</p><h1 id="6-运行结果比较"><a href="#6-运行结果比较" class="headerlink" title="6.运行结果比较"></a>6.运行结果比较</h1><p><img src="/images/fibonacci_result40.png" alt="40"><br><img src="/images/fibonacci_result90.png" alt="90"></p><ul><li>可以看到，后两种解法比递归解法明显要快很多。</li><li>当n = 40时,动态规划解法比矩阵解法还要快些,都比递归解法快得多。</li><li>当n取更大些，比如n = 90时,动态规划解法就比矩阵解法慢了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> C++ </tag>
            
            <tag> 斐波那契 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LPA算法C++实现及模块度计算</title>
      <link href="/2018/11/12/lpa%E7%AE%97%E6%B3%95c++%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%A8%A1%E5%9D%97%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
      <url>/2018/11/12/lpa%E7%AE%97%E6%B3%95c++%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%A8%A1%E5%9D%97%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，<br>因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。</p><span id="more"></span><p>我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。<br>Louvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。<br>然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，<br>因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。</p><p>然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。<br>最后调试好，就OK啦。</p><h1 id="1-LPA基本思想"><a href="#1-LPA基本思想" class="headerlink" title="1.LPA基本思想"></a>1.LPA基本思想</h1><p>给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中<br>数量最多的标签作为该节点的标签。标签即代表所属社区。</p><ul><li>1 初始时，给每个节点一个标签，通常以其id作为初始标签。</li><li>2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。</li><li>3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置,<br>  比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，<br>  网上有说直到每个节点的标签不再变化为止，其实这比较难判定，<br>  而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，<br>  后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)</li></ul><p>LPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，<br>每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。</p><p>同步更新和异步更新还没搞懂，回头看看再说。</p><p><strong>缺点</strong> </p><ul><li>1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。</li><li>2 可能出现巨型社区。</li></ul><p><strong>算法改进思路</strong></p><ul><li>目前还没</li></ul><h1 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2.数据集"></a>2.数据集</h1><p><strong><em>dolphins</em></strong></p><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><p>代码都在<a href="https://github.com/wmjtxt/LPA.git">我的github</a>上, 下面仅列出main函数代码.</p><pre class=" language-c++"><code class="language-c++">#include "lpa.h"using namespace std;void display_time(const char *str)&#123;    time_t rawtime;    time ( &rawtime );    cerr << str << " : " << ctime (&rawtime);&#125;int main(int argc, char **argv)&#123;    srand(time(NULL));    //parse_args(argc, argv);    if(argc != 2)&#123;        cerr << "argc not 2" << endl;    &#125;    string filename = argv[1];    cout << "filename = " << filename << endl;    time_t time_begin, time_end;    time(&time_begin);    display_time("start");    //sleep(3);    LPA lpa(filename);    cout << "初始模块度 = " << lpa.modularity() << endl;    for(int i = 0; i < 5; i++)&#123;        lpa.labeled();        lpa.display();    &#125;    display_time("end");    time(&time_end);    return 0;&#125;</code></pre><h1 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4.运行结果"></a>4.运行结果</h1><p><img src="/images/lpa1.png" alt="运行结果1"><br><img src="/images/lpa2.png" alt="运行结果2"></p>]]></content>
      
      
      <categories>
          
          <category> 复杂网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复杂网络 </tag>
            
            <tag> LPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去掉Deepin登录界面的模糊效果</title>
      <link href="/2018/11/06/deepin-lockscreen/"/>
      <url>/2018/11/06/deepin-lockscreen/</url>
      
        <content type="html"><![CDATA[<p>引自: <a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=149463&amp;extra=">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=149463&amp;extra=</a></p><p>其实这个页面我收藏了，但今天想设置的时候网络不好页面打不开，所以自己复制一个吧。</p><p>deepin会将所有切换过的锁屏壁纸模糊效果保存到目录：/var/cache/image-blur/下<br><span id="more"></span></p><ul><li>1.首先把这个文件夹下的所有文件都删除;</li><li>2.锁屏;</li><li>3.再次登录后，进到这个文件夹下，就可以看到只有一个文件(file.jpg);</li><li>4.把需要用的图片替换掉这个文件即可。<ul><li><code>sudo cp 需要使用的图片.jpg /var/cache/image-blur/file.jpg</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些想法</title>
      <link href="/2018/10/28/somethinkings/"/>
      <url>/2018/10/28/somethinkings/</url>
      
        <content type="html"><![CDATA[<h2 id="工作现状"><a href="#工作现状" class="headerlink" title="工作现状"></a>工作现状</h2><ul><li>项目, 进展很慢</li><li>技术, 提高有限</li><li>论文, 看不进去<pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> more <span class="token operator">--</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span>项目，我主要负责数据预处理，使用Java，真是不太会，写的很慢，一个小想法都要搞一天。比如之前，数据库存储过程我就搞了一天才运行成功。最后发现只是个小错误卡住了，细心还是很重要的。<span class="token number">2</span><span class="token punctuation">.</span>技术主要是通过看书刷题来提高，目前是在LeetCode和PAT上刷，语言主要是C<span class="token operator">++</span>，每天各<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>道，刷的还是很慢的，无奈技术太差。<span class="token number">3</span><span class="token punctuation">.</span>论文，可以说还没有开始。想法是先看社团检测的经典算法并实现，至少弄懂各个算法，然后再看有没有可以写成论文的想法，其实我要求不高，水一篇EI就行了。</code></pre>Deepin上印象笔记不太好用，这样记笔记有些麻烦啊。<br>以后可以每天早上或头天晚上，开始做事之前，先写个<code>todolist.md</code>，这样目标清晰，可能做的更快一点。<br>如果有一个点卡住了，可以先做下一个，卡住的地方说不定会突然有思路，然后再回去接着做就行。</li></ul><p>今天就这样，写个todolist去。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Excel导数据到MySQL</title>
      <link href="/2018/10/17/importDatatoMySQL/"/>
      <url>/2018/10/17/importDatatoMySQL/</url>
      
        <content type="html"><![CDATA[<p><strong>运行环境:</strong> Windows10 和 Deepin15.7, MySQL14.4, Java1.8.0_181<br><br><strong>使用工具:</strong> poi,JDBC<br><br><strong>数据规模:</strong> 35万条，5个文件夹，146个Excel文件(.xls,.xlsx)</p><span id="more"></span><p>一开始在win10里运行，需要3个小时，把我吓到了，当时也没多想，导完数据就做处理去了。<br>后来到deepin里导(电脑装的双系统)，同样的数据，同样的代码，只需要100秒左右，又把我吓到了，这差距咋这么大呢。虽然deepin装在固态里，但也不至于直接差了整整一百倍吧。</p><p>然后我就又回到win10，想着做一下优化，看能不能快点，因为在网上看到有说把日志关了会快一些。我试了下，时间一下子提高到160多秒!好吧，原来就是日志的问题。</p><p>然后我又把deepin里MySQL的日志开启，测试了一下，974454ms，约16分钟，还是比win10快不少的。</p><p><strong>MySQL在win10里默认日志开启，而deepin里默认日志关闭。</strong></p><p><strong>win10的MySQL日志关闭方法:</strong></p><ul><li>找到my.ini文件，在里面加入一行:skip-log-bin，保存关闭，重启MySQL服务。</li></ul><p><strong>deepin的MySQL日志开启方法:</strong></p><ul><li>`sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</li><li><code>找到里面的</code>server-id<code>和</code>log_bin`这两行，把前面的#删掉</li><li>回到上一层路径，执行<code>./debian-start</code>(这一步是必须的，一开始我没执行，仅修改上面的两行后，mysql服务开启不了)</li><li><code>sevice mysql restart</code> 重启MySQL服务</li></ul><p>当然，除了关闭日志，我还做了其他的优化，比如String改为StringBuffer,Statement改为PreparedStatement等，不过这些都提高不明显。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Deepin</title>
      <link href="/2018/09/29/myDeepin/"/>
      <url>/2018/09/29/myDeepin/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#chrome">Chrome</a></li><li><a href="#ssh">SSH</a></li><li><a href="#git">Git</a></li><li><a href="#gcc">GCC</a></li><li><a href="#youcompleteme">YouCompleteMe</a></li><li><a href="#mysql">MySQL</a></li><li><a href="#vim-instant-markdown">vim-instant-markdown</a></li><li><a href="#variety">Variety</a></li><li><a href="#conky">Conky</a></li><li><a href="#pycharm">Pycharm</a></li><li><a href="#texstudio">TexStudio</a></li><li><a href="#atom">Atom</a></li><li><a href=""></a></li></ul><span id="more"></span><h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><p>Deepin现在好像是自带Chrome。不过还需要登录Google账户同步书签，这才是最重要的。而登录Google账户必须翻-墙。<br>现如今梯子越来越难找了，很多都被封了。<br>目前能用的是这个<a href="https://github.com/yinghuocho/firefly-proxy">firefly</a>，下载安装，然后打开会弹出一个页面，随便注册一个账户就有两天的时长可以用。</p><p>真心希望有一天能取消这厚厚的wall。<br>当然也真心希望有一天我们的技术能领先全球。</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><ul><li>安装ssh<ul><li><code>sudo apt-get install openssh-server</code></li></ul></li><li>开启ssh服务<ul><li><code>sudo service sshd start</code></li></ul></li></ul><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul><li>安装git<ul><li><code>sudo apt-get install git</code></li></ul></li><li>设置name和email<ul><li><code>git config --global user.name &quot;name&quot;</code></li><li><code>git config --global user.email &quot;email&quot;</code></li></ul></li><li>设置ssh-key<ul><li>先执行<code>ssh-keygen -t rsa -C &quot;email&quot;</code></li><li>然后在github上找到”Account settings”,”SSH Keys”页面,点击”Add SSH Key”,将~/.ssh/id_rsa.pub的内容粘贴到Key文本框内。</li></ul></li><li>连接远程库<ul><li><code>git remote add origin git@github.com:yourname/reponame.git</code></li></ul></li><li>常用命令<pre><code>  git init  git push origin master  git pull origin master  git add -A  git commit -m &quot;text&quot;  git status  git log  git clone repoAddress</code></pre></li></ul><h1 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h1><ul><li><p>系统好像是自带了gcc,但g++需要手动安装</p></li><li><p><code>sudo apt-get install g++</code></p></li></ul><h1 id="YouCompleteMe"><a href="#YouCompleteMe" class="headerlink" title="YouCompleteMe"></a>YouCompleteMe</h1><p>一款强大的vim插件</p><p>安装方法参考：<a href="https://wmjtxt.github.io/2018/05/14/%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/">安装YouCompleteMe</a></p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h1 id="vim-instant-markdown"><a href="#vim-instant-markdown" class="headerlink" title="vim-instant-markdown"></a>vim-instant-markdown</h1><p>一款vim插件，可以实现markdown文件即时预览</p><p>安装方法参考：<a href="https://github.com/yangyangwithgnu/use_vim_as_ide#8.4">https://github.com/yangyangwithgnu/use_vim_as_ide.git</a></p><h1 id="Variety"><a href="#Variety" class="headerlink" title="Variety"></a>Variety</h1><p>Variety是一款自动更换壁纸的软件<br>直接在深度商店安装或者<code>sudo apt-get install variety</code></p><h1 id="Conky"><a href="#Conky" class="headerlink" title="Conky"></a>Conky</h1><p>Conky是一款可以显示天气的桌面软件。来源：深度论坛</p><ul><li><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=148009&amp;highlight=conky">deepin利用conky打造一个炫酷的桌面</a></li><li><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=152734&amp;highlight=conky">conky-weather 3.0 (Conky天气)</a></li></ul><p>我用的第二个</p><h1 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h1><p><code>sudo apt-get install pycharm-community</code></p><h1 id="TexStudio"><a href="#TexStudio" class="headerlink" title="TexStudio"></a>TexStudio</h1><p>Latex编辑器</p><ul><li>首先安装texlive, 可以直接在官网下载下来安装, <a href="http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz">install-tl-unx.tar.gz</a>, 也可以命令安装, <code>sudo apt-get install texlive-full</code></li><li>然后安装texstudio, <code>sudo apt-get install texstudio</code></li></ul><h1 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h1><p>开源文本编辑器, <code>sudo apt-get install atom</code>, 也可以在深度商店安装</p>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社团检测基本概念</title>
      <link href="/2018/09/28/Community-Detection-values/"/>
      <url>/2018/09/28/Community-Detection-values/</url>
      
        <content type="html"><![CDATA[<h2 id="1-模块度-Modularity"><a href="#1-模块度-Modularity" class="headerlink" title="1.模块度(Modularity)"></a>1.模块度(Modularity)</h2><p>&emsp;&emsp;把划分社团后的网络与相应的零模型(Null model)进行比较，以度量社团划分划分的质量。一个网络的模块度定义为：该网络的社团内部边数与相应的零模型的社团内部变数之差占整个网络边数的比例。<br><br>&emsp;&emsp;计算公式为：<br><br><span id="more"></span></p><p><center><images src="http://chart.googleapis.com/chart?cht=tx&chl= Q = \sum\limits_{v}[e_{vv} - (a_v)^2]"></center><br></p><p>&emsp;&emsp;其中,<images src="http://chart.googleapis.com/chart?cht=tx&chl= e_{vv}">为社团v和社团w之间的连边占整个网络边数的比例。<images src="http://chart.googleapis.com/chart?cht=tx&chl= a_v">为一端与社团v中节点相连的边的比例。<br></p><h2 id="2-度中心性-Degree-centrality"><a href="#2-度中心性-Degree-centrality" class="headerlink" title="2.度中心性(Degree centrality)"></a>2.度中心性(Degree centrality)</h2><p>&emsp;&emsp;度中心性值定义为：<center><images src="http://chart.googleapis.com/chart?cht=tx&chl= DC_i = \frac{k_i}{N-1}"></center><br><br>&emsp;&emsp;其中，<images src="http://chart.googleapis.com/chart?cht=tx&chl= k_i">为节点i的度，N为网络中的节点个数。<br></p><h2 id="3-介数中心性-Betweenness-centrality"><a href="#3-介数中心性-Betweenness-centrality" class="headerlink" title="3.介数中心性(Betweenness centrality)"></a>3.介数中心性(Betweenness centrality)</h2><p>&emsp;&emsp;介数中心性是以经过某个节点的最短路径的数目来刻画节点重要性的指标,简称介数(BC)。<br><br>&emsp;&emsp;节点i的介数定义为：<center><images src="http://chart.googleapis.com/chart?cht=tx&chl= BC_i= \sum\limits_{s{\ne}i{\ne}t}\frac{n_{st}^{i}}{g_{st}}"></center><br><br>&emsp;&emsp;其中,<images src="http://chart.googleapis.com/chart?cht=tx&chl= g_{st}">为从节点s到节点t的最短路径的数目, <images src="http://chart.googleapis.com/chart?cht=tx&chl=n_{st}^{i}">为从节点s到节点t的<images src="http://chart.googleapis.com/chart?cht=tx&chl= g_{st}">条最短路径中经过节点i的最短路径的数目。</p><h2 id="4-接近中心性-Closeness-centrality"><a href="#4-接近中心性-Closeness-centrality" class="headerlink" title="4.接近中心性(Closeness centrality)"></a>4.接近中心性(Closeness centrality)</h2><p>接近数，即平均路径长度的倒数。</p><h2 id="5-k-壳与k-核"><a href="#5-k-壳与k-核" class="headerlink" title="5.k-壳与k-核"></a>5.k-壳与k-核</h2><h2 id="6-特征向量中心性"><a href="#6-特征向量中心性" class="headerlink" title="6.特征向量中心性"></a>6.特征向量中心性</h2>]]></content>
      
      
      <categories>
          
          <category> 复杂网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复杂网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Win10</title>
      <link href="/2018/09/19/%E9%85%8D%E7%BD%AEwin10/"/>
      <url>/2018/09/19/%E9%85%8D%E7%BD%AEwin10/</url>
      
        <content type="html"><![CDATA[<p>两年来，装机很多次了，包括Windows10和Deepin，还有Ubuntu，ArchLinux等也都尝试过。用了快十年的老机子被折腾地不堪重负，尤其是近半年来，总是用着用着突然就关机了，温度很高，应该是散热太差了。<br>一开始只是Windows10会这样，后来逐渐地Deepin也出现这种情况。于是就考虑换电脑了。由于资金紧张，就买了个3000多的低配点的机子，还是AMD的。当个过渡机子用吧，用到毕业工作了再说。</p><p>关于配置Deepin写在<a href="https://wmjtxt.github.io/2018/09/29/myDeepin/">配置Deepin</a>了，这篇是关于配置Windows10。其实配置这两个系统当然是有重复的地方的，比如装好系统后，首先我都是安装Chrome浏览器。<br>然后想办法登录Google账户，同步书签；比如配置C/C++编译环境（当然配置方法略有不同）；比如安装微信QQ网易云音乐百度网盘等常用软件；比如安装数据库管理软件。<br>对于这些呢，”酌情”处理。</p><span id="more"></span><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#0常用软件">常用软件</a></li><li><a href="#1git">Git</a></li><li><a href="#2mingw64">mingw64</a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li><li><a href=""></a></li></ul><h1 id="0-常用软件"><a href="#0-常用软件" class="headerlink" title="0.常用软件"></a>0.常用软件</h1><p>Chrome, 微信, QQ, 网易云音乐, 百度网盘等</p><h1 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h1><p>在官网下载安装包进行安装。</p><h1 id="2-mingw64"><a href="#2-mingw64" class="headerlink" title="2.mingw64"></a>2.mingw64</h1><p>在官网下载安装包进行安装。<br>安装好后，还需要配置环境变量，配置好后，gcc/g++都能用了。</p><h1 id="3-cdt"><a href="#3-cdt" class="headerlink" title="3.cdt"></a>3.cdt</h1><p>cdt是eclipse的插件，装好后可以在eclipse里运行c/c++代码。还是不错的。省的再装vs了。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装YouCompleteMe</title>
      <link href="/2018/05/14/%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/"/>
      <url>/2018/05/14/%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://github.com/Valloric/YouCompleteMe">https://github.com/Valloric/YouCompleteMe</a></p><ul><li><p>1.安装Vundle</p><ul><li><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li><li><p>把以下内容复制到.vimrc:</p><span id="more"></span><pre class=" language-shell"><code class="language-shell">set nocompatible              " be iMproved, requiredfiletype off                  " required" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()" alternatively, pass a path where Vundle should install plugins"call vundle#begin('~/some/path/here')" let Vundle manage Vundle, requiredPlugin 'VundleVim/Vundle.vim'" The following are examples of different formats supported." Keep Plugin commands between vundle#begin/end." plugin on GitHub repoPlugin 'tpope/vim-fugitive'" plugin from http://vim-scripts.org/vim/scripts.html" Plugin 'L9'" Git plugin not hosted on GitHubPlugin 'git://git.wincent.com/command-t.git'" git repos on your local machine (i.e. when working on your own plugin)"Plugin 'file:///home/gmarik/path/to/plugin'" The sparkup vim script is in a subdirectory of this repo called vim." Pass the path to set the runtimepath properly.Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;" Install L9 and avoid a Naming conflict if you've already installed a" different version somewhere else." Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;" All of your Plugins must be added before the following linecall vundle#end()            " requiredfiletype plugin indent on    " required" To ignore plugin indent changes, instead use:"filetype plugin on"" Brief help" :PluginList       - lists configured plugins" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate" :PluginSearch foo - searches for foo; append `!` to refresh local cache" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal"" see :h vundle for more details or wiki for FAQ" Put your non-Plugin stuff after this line</code></pre></li><li>Install Plugins: 打开vim执行<code>:PluginInstall</code> 或者直接输入命令<code>sudo vim +PluginInstall +qall</code></li></ul></li><li>2.Install development tools and CMake:<ul><li><code>sudo apt-get install build-essential cmake</code></li></ul></li><li>3.Make sure you have Python headers installed:<ul><li><code>sudo apt-get install python-dev python3-dev</code></li></ul></li><li>4.安装clang<ul><li><code>sudo apt-get install clang</code></li></ul></li><li>5.Compiling YCM with semantic support for C-family languages:<ul><li><code>git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe</code></li><li><code>cd ~/.vim/bundle/YouCompleteMe</code></li><li><code>./install.py --clang-completer</code></li><li>如果出错执行 <code>git submodule update --init --recursive</code></li></ul></li><li><p>6.把以下内容复制到.vimrc中</p><p>  <code>`</code>shell<br>  “—————————-“<br>  “—— YouCompleteMe ——-“<br>  “—————————-“<br>  let g:ycm_global_ycm_extra_conf = ‘~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py’</p></li></ul><pre><code>&quot; YouCompleteMeset runtimepath+=~/.vim/bundle/YouCompleteMelet g:ycm_collect_identifiers_from_tags_files = 1           &quot; 开启 YCM 基于标签引擎let g:ycm_collect_identifiers_from_comments_and_strings = 1 &quot; 注释与字符串中的内容也用于补全let g:syntastic_ignore_files=[&quot;.*\.py$&quot;]let g:ycm_seed_identifiers_with_syntax = 1                  &quot; 语法关键字补全let g:ycm_complete_in_comments = 1let g:ycm_confirm_extra_conf = 0let g:ycm_key_list_select_completion = [&#39;&lt;c-n&gt;&#39;, &#39;&lt;Down&gt;&#39;]  &quot; 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.let g:ycm_key_list_previous_completion = [&#39;&lt;c-p&gt;&#39;, &#39;&lt;Up&gt;&#39;]let g:ycm_complete_in_comments = 1                          &quot; 在注释输入中也能补全let g:ycm_complete_in_strings = 1                           &quot; 在字符串输入中也能补全let g:ycm_collect_identifiers_from_comments_and_strings = 1 &quot; 注释和字符串中的文字也会被收入补全let g:ycm_global_ycm_extra_conf=&#39;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&#39;let g:ycm_show_diagnostics_ui = 0                           &quot; 禁用语法检查inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot; |            &quot; 回车即选中当前项nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;|     &quot; 跳转到定义处&quot;let g:ycm_min_num_of_chars_for_completion=2                 &quot; 从第2个键入字符就开始罗列匹配项```</code></pre><p>按说这样应该就可以用了，不过提示有错误。</p><p><code>YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</code></p><p>在网上找了好久，试了好多方法，最终还是按深度社区的方法才解决。<br><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=43716">编译安装vim8.0,添加python支持</a></p><ul><li>1.<code>vim --version|grep python</code> 查看是否支持python</li><li>2.<code>sudo apt-get install python-dev python3-dev libncurses5-dev</code>，前面安装过python-dev python3-dev,这里会提示已是最新版本</li><li>3.<code>git clone https://github.com/vim/vim.git</code></li><li>4.<code>cd ~/vim</code></li><li>5.<code>./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/</code>,这里python2.7和python3.6要跟你安装的版本相对应</li><li>6.<code>sudo make &amp;&amp; sudo make install</code></li><li>7.<code>which vim</code>查看vim安装位置，我的是/usr/bin/vim，然后<code>sudo cp /usr/local/vim/bin/vim /usr/bin/</code></li></ul><p>截图:</p><p><img src="/images/YouCompleteMe.JPG" alt="YCM"></p>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>auto.sh</title>
      <link href="/2018/05/03/wmj-auto.sh/"/>
      <url>/2018/05/03/wmj-auto.sh/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">#!/bin/shecho "\---\n\layout: post\n\<!-- more -->title:\n\---\" > $(date +%Y-%m-%d)-$1.md;</code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chvt-N</title>
      <link href="/2018/05/03/chvt/"/>
      <url>/2018/05/03/chvt/</url>
      
        <content type="html"><![CDATA[<ul><li>在deepin中</li></ul><table><thead><tr><th>命令</th><th>效果</th><th>备注</th></tr></thead><tbody><tr><td><code>chvt 1</code></td><td>进入锁屏</td><td>这个界面可以用screenshot.sh截屏，截到的是锁屏界面，而以下几个截到的都是黑屏</td></tr></tbody></table><span id="more"></span><p>|<code>chvt 2</code>|隐藏任务栏||<br>|<code>chvt 3-5</code>|进入命令行模式||<br>|<code>chvt 6</code>|进入桌面|这个状态下截到的也是黑屏，不知道为啥|</p><ul><li>在ubuntu中</li></ul><table><thead><tr><th>命令</th><th>效果</th><th>备注</th></tr></thead><tbody><tr><td><code>chvt 1-6</code></td><td>进入命令行模式</td><td></td></tr><tr><td><code>chvt 7</code></td><td>进入桌面</td><td><code>chvt 7</code> 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）</td></tr></tbody></table><p><img src="/images/screenshot1.png" alt="image"></p><p><code>screenshot.sh</code>代码如下</p><pre class=" language-shell"><code class="language-shell">#!/bin/shchvt 1; #在ubuntu中为 chvt 7;sleep 5s;DISPLAY=:0 XAUTHORITY=/var/run/lightdm/root/:0 xwd -root -out ~/screenshot.xwd;convert ~/screenshot.xwd /home/wmj/screenshot_$(date +%Y%m%d%H%M%S).png;rm ~/screenshot.xwd</code></pre><p>并且，在deepin中，执行<code>screenshot.sh</code>需要<code>sudo /bin/sh screenshot.sh</code><br>而在ubuntu中只需要<code>/bin/sh screenshot.sh</code>就可以了。</p><p>好吧，刚刚又发现，在deepin中需要sudo应该是权限不够。所以chmod改了权限后，就不用sudo了。<br>但是截到的图依然不好，如下所示:</p><p><img src="/images/screenshot2.png" alt="screenshot2"></p><p>为了保持可读性，上面的表格就放着（因为我之前操作确实是那样，也许deepin还在持续修改中，今天更新系统后，效果就变成下面的情况了），现在（2018-05-03-21-38）的效果如下表格所示：</p><ul><li>在deepin中</li></ul><table><thead><tr><th>命令</th><th>效果</th><th>备注</th></tr></thead><tbody><tr><td><code>chvt 1</code></td><td>进入桌面</td><td>:0应该就是表示桌面</td></tr><tr><td><code>chvt 2-6</code></td><td>进入命令行模式</td></tr></tbody></table><p><img src="/images/screenshot3.png" alt="screenshot3"></p><ul><li>在ubuntu中</li></ul><table><thead><tr><th>命令</th><th>效果</th><th>备注</th></tr></thead><tbody><tr><td><code>chvt 1-6</code></td><td>进入命令行模式</td><td></td></tr><tr><td><code>chvt 7</code></td><td>进入桌面</td><td><code>chvt 7</code> 然后截图，截到的就是当前桌面（如果是锁屏则截到锁屏）</td></tr></tbody></table><p>另外，目前我的deepin image viewer不能用。希望deepin越变越好。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习爬虫 &amp; Linux登录页面截屏</title>
      <link href="/2018/05/01/%E5%AD%A6%E4%B9%A0%E7%88%AC%E8%99%AB/"/>
      <url>/2018/05/01/%E5%AD%A6%E4%B9%A0%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>想学爬虫，在知乎上看了帖子，然后不少人都建议用scrapy，就学习了一下，几经周折例子总算运行成功，但还是有点不太懂。</p><p>还有一个事，之前在网上找了一个给登录界面截屏(因为在锁屏状态，快捷键截屏无效)的脚本，在ubuntu上可以运行，一开始在deepin上也可以运行，但后来就不行了，不知道是不是更新了系统的原因。看来还是有问题。程序一运行，图形界面就黑屏了，也不报错，开始还会嘀一声，后来也没有什么声音了。不知道为什么。同样的程序在ubuntu上运行一点事没有啊。</p><p>真搞不懂。<br><span id="more"></span></p><p>也怪我技术太差，很小的问题都要半天才弄懂。要多花时间学技术啊。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some Notes of 201804</title>
      <link href="/2018/04/11/WMJTXT/"/>
      <url>/2018/04/11/WMJTXT/</url>
      
        <content type="html"><![CDATA[<h1 id="一些笔记"><a href="#一些笔记" class="headerlink" title="一些笔记"></a>一些笔记</h1><h1 id="2018-4-11"><a href="#2018-4-11" class="headerlink" title="2018.4.11"></a>2018.4.11</h1><span id="more"></span><p>做了百度的笔试题，交了，也不知道结果会如何。<br>好多题的答案都是网上找的，虽然我也做了测试和整合，但所做实在寥寥。<br>真的有太多东西需要学习、复习、温习、练习了。</p><p>fighting</p><p>由于前段时间整理数据时的失误，上学期做的很多东西都没了，<br>包括用Java做的JDBC导入数据和用MySQL对数据做的分析。<br>今天尝试重写MySQL的部分，好难，回忆又回忆不起来，<br>重新思考吧，又因为那个项目已经不做了，没有压力太难进入状态。<br>这个只能先放放，先去做更重要的事情吧。</p><p>Good night!</p><hr><h1 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018.4.13"></a>2018.4.13</h1><p>昨天老师们宣布接到个项目，接下来一个多月都得忙起来了，学习时间会更少。</p><p>今天上午课间接到百度的电面，半个小时左右，表现一般。正好这期间老师点名了，回来后正好被他看到，被怼了几句，下课去解释了下，还好。这老师刀子嘴豆腐心吧。<br>晚上是七牛的笔试，答的也一般，五道大题只答出两道，其中一道还没答全。</p><p>接下来是今日头条、58以及晨星的笔试，抽空再复习下吧。不能都裸考。通过笔试和电面，也发现自己的知识很不牢固，以前会的都忘了。</p><p>偶尔放松可以，不能玩物丧志。</p><p>ps:用这个不知道怎么排版呐，就这样先将就着吧。</p><p>对了，兰马没有中签，意料之中，但天气转暖了，还是要跑步，锻炼身体。还有，少熬夜吧。</p><hr><h1 id="2018-4-17"><a href="#2018-4-17" class="headerlink" title="2018.4.17"></a>2018.4.17</h1><p><strong>转变思维</strong></p><p>一直以来，虽然大部分时候我是用C++，可还是C的思维。虽然之前学了vector,map等数据结构，可很少用。刷题的时候，我总是首先想到用数组，或者写个函数，而没有想过用C++里已有的那些数据结构。</p><p>还是要多写多用。vector,map,string。这样也可以加快解题速度，不然刷题太慢了。也要多看别人的代码，学习其中的解题思路和思维。</p><hr><h1 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018.4.19"></a>2018.4.19</h1><p>这两天咽炎复发，真难受。lz太干了，要多喝水。</p><p>昨天晨星的笔试，题量有点大，没做完，又是最后两道编程题没做。事先该看一下题型的，应该捡分多的先做。</p><ul><li>总的来说，有三个方面需要加强。<ul><li>1.基础知识（数据结构、操作系统、计算机组成、网络、SQL等基础知识）<strong>这个要多看书和网上总结的资料</strong></li><li>2.算法和数据结构（线性表、链表、队列和栈、树、图以及各种排序等）<strong>这个同上，还要把代码弄熟</strong></li><li>3.编程技巧（一些编程思想和工具的使用，如递归、栈、hash、动规以及C++里的vector、map等的应用）<strong>这个要多刷题，并学习大神的解题方法</strong></li></ul></li></ul><p>Fighting</p><hr><p>=======</p><hr><h1 id="2018-4-20"><a href="#2018-4-20" class="headerlink" title="2018.4.20"></a>2018.4.20</h1><p>热感冒完了是冷感冒。难受。</p><p>昨天晚上做了爱奇艺的，没做完，今天晚上做了美团的，也没做完。还花了半小时做了知乎的。所以美团晚了半小时开始做，导致没做完。快手实在没办法，只能放弃了。为什么都赶到一块了呢。反正过去了。基础知识还是不牢，美团选择题里还有考到SVM的，虽然学过，可都忘光了。对了，我报的机器学习/数据挖掘岗。暂告一段落。<br>还是要多看书。后面也许还有别的笔试，虽然可能性很小了，而且公司越来越少了。</p><hr><h1 id="2018-4-23"><a href="#2018-4-23" class="headerlink" title="2018.4.23"></a>2018.4.23</h1><p>今天又下雨，降温。病差不多好了，还要多注意点，添衣加衣喝水。时间过得太快了。</p><p>昨天看了动态规划，今天做了几道题。感觉还行，但是难的题我依然想不出解法，只能参考别人的。慢慢来吧。LeetCode和牛客网的在线编程题都不错，上面有讨论，如果不会，可以参考大神们的代码。</p><p>今天下午随便看了看linux和shell编程的东西。这块也很有用。</p><p>时间很宝贵，要珍惜啊。</p><p>顺便：实验室的项目都是做文字性的东西，也不能不做。尽量高效的去做吧，时间真的不多了。</p><hr><h1 id="2018-4-27"><a href="#2018-4-27" class="headerlink" title="2018.4.27"></a>2018.4.27</h1><p>快放假了。可是实验室还有任务，学习任务也很重。不能出去玩了。真没意思。</p><p>最近装了个在虚拟机里装了个deepin，界面很漂亮，喜欢，想买个电脑了。在虚拟机里太卡了。唉，还是先提高技术吧。看着桌上还没翻过的书，真是亚历山大。</p><p>所以列了个五月学习任务清单<code>task201805.md</code>。还是好好学习吧，其他的先不要想。</p><p>ps:有时间要跑步了，病都好了，别再偷懒。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
