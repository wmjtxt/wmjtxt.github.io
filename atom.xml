<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木夕木火のBlog</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wmjtxt.github.io/"/>
  <updated>2022-03-17T04:47:00.558Z</updated>
  <id>https://wmjtxt.github.io/</id>
  
  <author>
    <name>木夕木火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隔离日记</title>
    <link href="https://wmjtxt.github.io/2022/03/17/geliriji/"/>
    <id>https://wmjtxt.github.io/2022/03/17/geliriji/</id>
    <published>2022-03-17T03:24:44.000Z</published>
    <updated>2022-03-17T04:47:00.558Z</updated>
    
    <content type="html"><![CDATA[<p>【隔离】</p><p>今天已经是这次隔离的第四天了。一开始通知隔离两天，做两天核酸，后来又通知核酸出现异常，等复核结果。一旦有阳性可能就是14天，若全部阴性就解封。</p><p>至于说核酸异常，不知是真的，还是权宜之计。只能静待结果。</p><span id="more"></span><p>【疫情分析】</p><p>看起来这波疫情很严重，三月份以来，上海的病例数稳定增长，一开始的几天还有自行就医发现的，说明在社会上已经流传。病例多为轻型和无症状，<br>而且成堆出现，这说明病毒传播速度快，感染以后病症也较轻，专家说这就是奥米克戎变异株的特点。</p><p>放眼全国，由于境外及香港输入病例的影响，三月初就多地爆发，山东、上海、深圳、吉林……后来逐渐传到其他省份，目前已波及28省。不过新冠疫情已经<br>两年多，国内各省份关于严防严控的经验已经非常充足。倒是国外，已经对新冠病毒放任不管，未来堪忧。这两年，受国外输入病例的影响，国内爆发了<br>数十次小范围的疫情反弹。按下葫芦起了瓢，有些顾此失彼。由于每次都能在月余时间就控制住，所以大家的信心也从未降低。</p><p>只不过这一次反弹，由于奥米克戎毒株的传播力过于强大，不管从波及范围还是从病例数上，都是疫情以来反弹最严重的一次。如果不是已经有了防控经验，<br>恐怕情况会比当初的武汉还要严重。</p><p>【核酸检测】</p><p>关于疫情防控，其实就是封控小区，除了快递、外卖等行业，都不准出门。封控期间至少做两次核酸。做核酸的医务人员和防疫工作者也挺辛苦，奔波于<br>各个小区，做完一轮又一轮。3月以来，我已经做了五次核酸。3月4号晚上，万乐城5号楼发现有一个密接，刚刚搬完家的我不得不带着被子回去隔离。做了两次核酸后，<br>7号晚上解封，当时就到塘泾北苑来住了。按照要求11号又做了核酸。13号万乐城5号楼又发现密接，晚上单位的物业打电话还让我回去，这次我说明情况，表示我不该回去，也不想回去。可能情绪激动，直接说了心里话：这次我绝不可能回去。<br>上一次3月4号通知2月28后在万乐城5号楼的都回去，这一次13号通知让3月7号后在万乐城的都回去。有没有标准？而且我7号后不在万乐城住。他说我白天在，白天没解封呢，我当然在。无理取闹简直。他还笑着说他不会说出绝不回去这种话，<br>那倒是，事情不发生在他身上！后来公安给我打来电话，问我原因。我说明了情况，公安表示理解，他说本来还以为我要拒绝防疫？？？sb物业。然后说有情况再联系我。不过后来也没消息了。结果第二天早上就发现整个镇的小区都被封。<br>看来昨天公安就知道要封，所以我也没必要回万乐城了。不过我还是觉得，就算小区不被封，我也不应该回去。大不了我可以在塘泾北苑自我隔离，我本来已经准备这样做的。既然第二天小区隔离，那也没必要了。</p><p>【反思】</p><p>不过这说明我是一个情商低的人，总是把自己的真实想法说出来。还有一点固执，我认为对的事情，就总要坚持。可能换一种说法，会更好一些？比如放低姿态，就说我回去隔离很不方便，生活上会很困难，能不能帮帮我？让我在新家隔离？<br>不过谁知道他是不是欺软怕硬的人呢。实话说，还是不想跟这种人打交道。</p><p>还好这次没回去，如果回去，现在还在万乐城一个人吃外卖呢？！</p><p>所以还是相信自己吧。</p><p>【其他】</p><p>最近发现一个道理，其他大家都没那么聪明。很多东西我知道，别人未必知道；我能想到，别人未必能想到。当然我肯定也有很多知不道想不到的。只是相比大多数人，我还是能知道很多想到很多。所以不得不承认，活着就是不断重复一些已经知道已经想到<br>却仍然不断发生的事情。</p><p>比如过年的时候，爸妈去买东西，在商场被人骗，买了他们一个小挂坠，是个佛像。声称是真玉，原价上万，假一赔十，说你中奖了，只需出300多工本费即可拿走。这种拙劣的诈骗，很多人都不会信。但我爸就信了，说人家假一赔十，怎么可能假。</p><p>要不诈骗团伙那么多呢！赚钱是真他妈的快。数钱数到手抽筋，祝他们早日进去劳改！</p><p>【精准防控】</p><p>关于防疫，就算已经有很多经验，防控越严越好，但还是会有漏洞，比如集体做核酸排队人挤人，还有人在吃东西，这难道不危险吗。另一方面，又会由于着急防疫，做很多无效工作，也就是防疫扩大化，一刀切。过年的时候回家，老家的市里要求带星一律隔离，<br>后来中央和省里都下发文件不准一刀切，市里由规定带星的要有村委会的接收证明。？？？甩锅真是一把好手。怪不得乌纱帽带的好呢，除了帽子戴得好，马屁拍得好，其他应该不可能有啥作为了。懒政庸政，何止于此？</p><p>这次上海疫情也同样漏洞百出。一边迟迟不肯大范围封控，一边又出现，只要一栋楼里有一个密接，就全楼人回去隔离的要求。我甚至都不在那栋楼住了，我也要回去隔离？这是什么道理。之前在网上有很多人夸上海精准防控的，如今看来也是马马虎虎。精准不足，防控有余。<br>若是真的精准防控，首先重点是要求大家全天候戴口罩，餐饮等一律不准堂食。而不是只要跟密接住一栋楼就全部隔离，我想他们唯一的接触是电梯吧。假设两个陌生人，一个已经感染但还没发现（也就是密接），另一个人是没有感染，他们都戴口罩，在电梯短短两分钟，<br>我不相信这能传染。从上海病例成堆出现可以推断，同事同学朋友之间传染最快，为什么？因为他们之间会一起吃饭开会交流，而做这些事情一般是不戴口罩的。那么只要其中有一个带病毒，基本上都有感染风险。至于那个第一个感染的人，肯定是在某个带病毒的环境里或人面前，<br>摘下了他的口罩，可能是吃饭时，可能是摘口罩人脸识别，可能是摘口罩喝口水，可能是觉得四下无人，环境肯定安全，摘下口罩。</p><p>不管怎么样，希望疫情早日控制住。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【隔离】&lt;/p&gt;
&lt;p&gt;今天已经是这次隔离的第四天了。一开始通知隔离两天，做两天核酸，后来又通知核酸出现异常，等复核结果。一旦有阳性可能就是14天，若全部阴性就解封。&lt;/p&gt;
&lt;p&gt;至于说核酸异常，不知是真的，还是权宜之计。只能静待结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2021总结</title>
    <link href="https://wmjtxt.github.io/2022/02/20/2021summary/"/>
    <id>https://wmjtxt.github.io/2022/02/20/2021summary/</id>
    <published>2022-02-20T13:50:11.000Z</published>
    <updated>2022-03-17T03:23:16.769Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇迟来的总结，现在已经是2022年2月20日(北京冬奥会今天闭幕)，农历壬寅虎年正月二十。<br>但还是重点说2021年发生的一些事。想起来什么就写什么，所以会有点乱。</p><span id="more"></span><p>首先说一下2021的意义：疫情后（或者说疫情中）的第一个完整年，也是我研究生毕业后工作的第一个完整年。<br>人生进入新轨道，世界也进入一种新局面。</p><p>年初。春节前，石家庄发生疫情，在农村爆发，据说是在婚宴上传播很广。农村的婚宴，那真的是人口聚集大会。<br>虽然都鼓励不回家，留沪过年，不过接近春节的时候，疫情基本控制住，所以最后我还是做了核酸，回去了。<br>路上也没查核酸。疫情后的第一个春节，正常过，该走亲戚走亲戚。不过作为大龄单身，还是有一些些尴尬。<br>春节过完，坐高铁回上海。</p><p>工作上，参与项目也算顺利。不过遇到一些问题，也会束手无策。也逐渐发现了一些大企业的弊端，比如流程僵化，<br>效率底下，工具老旧，跟不上时代。奈何改变不了，只能去适应。<br>3月份，准备去外场出差。出差前一周的一天晚上，下班时骑电动车与汽车相撞，右脚受伤，当时很疼，不过也没去医院。<br>后来实在担心是不是骨折了，就去拍了片，还好没大事。不过走路只能一瘸一拐了。</p><p>伤筋动骨一百天，虽然没骨折，但那种疼痛程度，我猜筋肯定是伤了。事实证明也是如此，直到出差快结束，脚才恢复到正常状态。<br>另外，当时左胸部有些疼，还有些黄色淤青，可能是摔倒时被车把磕了一下。后来下半年去体检时，记得有条结论说左胸部有阴影，<br>有时间还是去医院检查一下。</p><p>出差的地方是辽宁。渤海之滨，风景很美。</p><p>下半年，出差回来，继续投身项目中。八月份高温假没休息，连续上班十九天（中间有的上半天）。巨累的一两个月。<br>国庆节回家几天，正好收花生。最后两天，秋雨森森，渐凉。</p><p>年底几个月不算忙，不过也没太闲。项目上有一些遗留问题需要解决，很麻烦。<br>年底，据说是效益不错，项目上有几个聚餐。给领导敬酒，不免听领导讲话。有些并不赞同，但也拿他没办法。一个人的认识<br>总有局限，领导也不例外。不过重点还是，他站在领导的角度，而我站在底层员工的角度，角度不同，看到的东西也很不一样。<br>不过人微言轻，以上也就是想想而已。不会有更多的延伸。我的工作重点应该是做好本职工作，提高自身技术能力，并尽量拓宽其他能力。</p><p>厨艺。上半年做的最多的是热干面，西红柿炒蛋，下半年做的最多的是回锅肉，煎豆腐。偶尔还做做炒面，辣子鸡丁，炸鸡米花。<br>当然还有煮饺子，手抓饼，煮泡面这些快餐。腌萝卜不是很成功，接下来准备尝试一下腊八蒜。</p><p>读书。主要是电子版。在知乎上看了几本小说，三体全集（看到第二部），一句顶一万句，追风筝的少年，灿烂千阳，朝闻道等。<br>纸质书的话，诗经，苏轼集，毛泽东选集（刚读第一部）。</p><p>个人问题。这一年中，先后认识了几个女生，最后都和平结束。性格、地域、颜值，原因各异。也有我自己的问题。</p><p>有部电视剧叫三十而已，真应景啊，专门拍给90年和91年的人看的？不过说的也对，三十而已。孔子说，三十而立，三十不立又何妨？<br>三十不立不代表以后就立不起来了。重点还是心态吧，要坚强坚持坚决坚挺，永不言弃。</p><p>天很晚了，就先写到这里。以后可以再补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇迟来的总结，现在已经是2022年2月20日(北京冬奥会今天闭幕)，农历壬寅虎年正月二十。&lt;br&gt;但还是重点说2021年发生的一些事。想起来什么就写什么，所以会有点乱。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="https://wmjtxt.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>正义与邪恶</title>
    <link href="https://wmjtxt.github.io/2021/06/20/note/"/>
    <id>https://wmjtxt.github.io/2021/06/20/note/</id>
    <published>2021-06-20T08:55:21.000Z</published>
    <updated>2022-02-20T13:48:58.620Z</updated>
    
    <content type="html"><![CDATA[<p>什么才是对的事呢？奋起反抗，还是脚踏实地。</p><hr/><p>今天去了一大会址纪念馆，人很多，熙熙攘攘，跟着讲解员，很快过了一遍，并没有很详细地看。<br>走马观花式地看完，拍了几张照片，就结束了。依然花了一上午，是因为等人和排队。<br>虽说活动有些流于形式，但纪念馆所呈现的内容非常有价值，毕竟那段历史本身就很精彩。<br>过去与现在，理想和现实，这确实会带给我们一些思考。</p><hr/><p>不管世界的最终形态是什么样，我们都不可能一下就跨过去，而只能一步步地，脚踏实地，走过去。</p><p>从党史来看，可以说是一群马克思主义者结合中国实际践行了马克思主义。但是后来，限于国情，不能够按照马列继续行进，只能把理想珍藏，<br>先脚踏实地地干一些事情，解决一些问题。比如老百姓的温饱问题，这很重要。大部分人的温饱问题在上世纪末已经得到解决，如今正在开展扶贫，<br>解决最后一批人的温饱问题。衣食住行是人的最根本需求，其中的衣食便是温饱问题，而住行呢，虽然无忧，却也分好坏。</p><p>既不能只看到好的方面，也不能仅看到坏的方面。</p><hr/><p>思考的太多，学习的太少，也不好。思而不学则殆。</p><p>关于马列等理论方面，了解得还不全面，理解得也不深刻；对于国情，了解也有不足，分析也不一定到位。</p><p>需要去做，而不是空想。</p><p>读书，调查。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么才是对的事呢？奋起反抗，还是脚踏实地。&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;今天去了一大会址纪念馆，人很多，熙熙攘攘，跟着讲解员，很快过了一遍，并没有很详细地看。&lt;br&gt;走马观花式地看完，拍了几张照片，就结束了。依然花了一上午，是因为等人和排队。&lt;br&gt;虽说活动有些流于形式，但
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>办理落户与相亲</title>
    <link href="https://wmjtxt.github.io/2020/11/14/note/"/>
    <id>https://wmjtxt.github.io/2020/11/14/note/</id>
    <published>2020-11-14T08:21:52.000Z</published>
    <updated>2021-06-20T08:52:31.086Z</updated>
    
    <content type="html"><![CDATA[<p>最近有两件头疼事。</p><p>第一件是办理落户。</p><p>今年上海放松落户政策，不需要用单位的三分了。</p><p>不过受疫情影响，比往年推迟了些，上周批复才下来，然后我又因为工作忙没顾上。周五才想起来，发现这周来不及了。</p><p>按流程来，现在有两件急迫的事情，报到证改派和调档案。<br><span id="more"></span></p><p>1.报到证改派，问了学校就业办，说是需要报到证原件、单位接收函和批复黄联，就可以办理。每周四领新报到证，所以需要周三之前把上面几个材料交过去。单位接收函周一可以去办。</p><p>2.掉档案，问了市人才交流中心，说需要委托人代办，手写委托书，签字按手印，拿着调档函去取档案，还是挺麻烦的。调档函问了单位，周一才能办出来。</p><p>所以，周一去办调档函和接收函。然后分别把相关材料寄回家和学校。并发办理。</p><p>有空再研究一下接下来的流程。头疼。</p><p>第二件是相亲。</p><p>市里亲戚介绍一个姑娘，说是也在上海工作，一直没什么回复，其实在我意料之中。门当户对在我看来还是很重要的一条。不过</p><p>自从2017年，我还是比较自卑，有点社交恐惧症。</p><p>之后几年，除了读个硕士，又无别的建树，感觉一无所有。</p><p>我又配得上谁呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有两件头疼事。&lt;/p&gt;
&lt;p&gt;第一件是办理落户。&lt;/p&gt;
&lt;p&gt;今年上海放松落户政策，不需要用单位的三分了。&lt;/p&gt;
&lt;p&gt;不过受疫情影响，比往年推迟了些，上周批复才下来，然后我又因为工作忙没顾上。周五才想起来，发现这周来不及了。&lt;/p&gt;
&lt;p&gt;按流程来，现在有两件急迫的事情，报到证改派和调档案。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://wmjtxt.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://wmjtxt.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Django学习笔记</title>
    <link href="https://wmjtxt.github.io/2020/04/17/learndjango/"/>
    <id>https://wmjtxt.github.io/2020/04/17/learndjango/</id>
    <published>2020-04-17T15:11:18.000Z</published>
    <updated>2021-06-20T08:47:12.566Z</updated>
    
    <content type="html"><![CDATA[<p>最新进度见<a href="https://github.com/wmjtxt/Django-Learning-Notes">https://github.com/wmjtxt/Django-Learning-Notes</a>, 这里就不更新了。</p><p>最近在学习Python，看小甲鱼的视频，并参考了<a href="https://github.com/TwoWater">TwoWater</a>的<a href="https://github.com/TwoWater/Python">草根学Python</a>, 其中提到了Django，和国外一个博客上的Django教程。遂开始学习Django.</p><h2 id="Django教程"><a href="#Django教程" class="headerlink" title="Django教程"></a>Django教程</h2><p>一个浅显易懂的Django教程: <a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/">A Complete Beginner’s Guide to Django</a></p><p>该教程共包含7个部分（Part）,以搭建一个论坛为例子，较为详细地介绍了Django搭建流程。</p><p>在Github上有关于它的中文翻译: <a href="https://github.com/wzhbingo/django-beginners-guide">A Complete Beginner’s Guide to Django 翻译计划</a>, 不过只有前2个Part是完整翻译的，剩下的没翻译完，好像是中止了，所以后面的部分我都是看的英文原版)。</p><p>根据教程一步一步执行命令，遇到问题并解决问题，虽然大多数问题是漏了某个步骤或某行代码，但在解决问题的过程中会仔细查看代码和步骤，这样就加深了理解。而且，由于其中涉及了不少HTML, CSS等相关<br>知识，需要的时候也去看看，学到不少。</p><p>为防止遗忘，自己动手做一个简略版的记录，也方便以后需要的时候回看。<br><span id="more"></span></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#part1入门">Part1 入门</a><ul><li><a href="#环境搭建">环境搭建</a></li><li><a href="#django项目">Django项目</a></li><li><a href="#django应用">Django应用</a></li><li><a href="#helloworld">Hello,World</a></li></ul></li><li><a href="#part2基础">Part2 基础</a><ul><li><a href="#论坛项目">论坛项目</a></li><li><a href="#django模型设计">Django模型设计</a></li><li><a href="#迁移模型">迁移模型</a></li><li><a href="#模型操作">模型操作</a></li><li><a href="#设置template">设置Template</a></li><li><a href="#测试主页">测试主页</a></li><li><a href="#静态文件设置">静态文件设置</a></li><li><a href="#djangoadmin">Django Admin</a></li></ul></li><li><a href="#part3进阶">Part3 进阶</a><ul><li><a href="#urls">URLs</a></li><li><a href="#设置topics页面">设置Topics页面</a></li><li><a href="#测试Topics页面">测试Topics页面</a></li><li><a href="#可重用templates">可重用Templates</a></li><li><a href="#表单">表单</a></li></ul></li><li><a href="#part4身份验证">Part4 身份验证</a></li><li><a href="#part5djangoorm">Part5 Django ORM</a></li><li><a href="#part6基于类的视图">Part6 基于类的视图</a></li><li><a href="#part7部署">Part7 部署</a></li></ul><p>## </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>安装python3<ul><li>略</li></ul></li><li>安装Virtualenv<ul><li><code>sudo pip3 install virtualenv</code></li></ul></li><li>使用virtualenv<ul><li>新建文件夹myproject : <code>mkdir myproject</code>、 <code>cd myproject</code></li><li>创建虚拟环境 : <code>virtualenv venv -p python3</code></li><li>激活虚拟环境 : <code>source venv/bin/activate</code></li><li>退出虚拟环境 : <code>deactivate</code></li></ul></li><li>安装Django<ul><li><code>pip install django==1.11.4</code></li></ul></li></ul><h2 id="Django项目"><a href="#Django项目" class="headerlink" title="Django项目"></a>Django项目</h2><ul><li><p><strong>创建Django项目</strong>: 在myproject文件夹下，开启虚拟环境后，执行下面的命令，创建新的Django项目, 其中<code>myproject</code>为项目名称:</p><ul><li><code>django-admin startproject myproject</code></li></ul></li><li><p><strong>查看目录结构</strong>: 创建项目成功后，可以使用命令<code>tree myproject</code>查看myproject的目录结构，其中的主要文件如下:</p><ul><li>manage.py</li><li>__init__.py</li><li>settings.py</li><li>urls.py</li><li>wsgi.py</li></ul></li><li><p><strong>开启服务器</strong>: 在manage.py所在文件夹下，执行下面的命令，开启网络服务器:</p><ul><li><code>python manage.py runserver</code></li></ul></li></ul><h2 id="Django应用"><a href="#Django应用" class="headerlink" title="Django应用"></a>Django应用</h2><ul><li><p>在Django项目中，有两个重要的概念：</p><ul><li><strong>app</strong>: 完成某个任务的web应用程序, app由models（数据库表）, views（视图）, templates（模板）, tests（测试）组成。</li><li><strong>project</strong>: 是配置和应用的集合, 一个项目由一个或多个应用组成。</li></ul></li><li><p><strong>创建Django应用</strong>: 在manage.py所在文件夹执行以下命令,其中<code>boards</code>为app名称</p><ul><li><code>django-admin startapp boards</code></li></ul></li><li><p><strong>文件解释</strong>: 创建boards应用后，会生成一个以boards为名的文件夹，其中的主要文件（夹）如下：</p><ul><li><strong>migrations/</strong>: 存储一些文件，以跟踪models.py文件的变更，用来保持数据库和models.py的同步</li><li><strong>admin.py</strong>: Django admin配置文件</li><li><strong>apps.py</strong>: 本应用的配置文件</li><li><strong>models.py</strong>: 定义web应用数据实例</li><li><strong>tests.py</strong>: 单元测试</li><li><strong>views.py</strong>: 处理web应用程序请求响应周期的文件</li></ul></li><li><p><strong>启用boards应用</strong></p><ul><li>找到settings.py的<code>INSTALLED_APPS</code>列表, 将应用<code>&#39;boards&#39;</code>添加到该列表中。</li></ul></li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h2><p>在views.py和urls.py中添加如下代码:</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在views.py里面添加home函数</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment" spellcheck="true">#new</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#new</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'Hello, World!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#new</span></code></pre><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在urls.py里面添加匹配url的正则表达式</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> boards <span class="token keyword">import</span> views <span class="token comment" spellcheck="true">#new</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>home<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#new</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>执行命令<code>python manage.py runserver</code>，在浏览器打开<a href="http://127.0.0.1:8000，可以看到效果啦">http://127.0.0.1:8000，可以看到效果啦</a></p><h1 id="Part2-基础"><a href="#Part2-基础" class="headerlink" title="Part2 基础"></a>Part2 基础</h1><h2 id="论坛项目"><a href="#论坛项目" class="headerlink" title="论坛项目"></a>论坛项目</h2><p>项目是一个论坛系统，由多个板块(Boards)组成, 板块由主题帖(Topic)组成，主题帖里有回复帖(Post)，主题帖和回复帖均由用户(User)创建。</p><p>所以这个项目共包含四个类Board, Topic, Post, User。由于Django在contrib中内置了User类，所以只需创建其余三个类。</p><p>以下两方面需要考虑：</p><ul><li><strong>各类之间的关系</strong>: <ul><li>Board and Topic: 1-0..*</li><li>Topic and Post: 1-1..*</li><li>Topic and User: 0..*-1</li><li>Post and User: 0..*-1</li></ul></li><li><strong>各类（模型）的设计</strong>: <ul><li>Board: 包含两个字段：name和description</li><li>Topic: 包括四个字段：subject，last_update，starter, board</li><li>Post: 有一个message字段，用于存储回复内容，create_at，update_at</li></ul></li></ul><h2 id="Django模型设计"><a href="#Django模型设计" class="headerlink" title="Django模型设计"></a>Django模型设计</h2><p>Board, Topic, Post这些模型的设计对应着应用程序的数据库设计。</p><p>根据上面的模型设计，相关代码实现在boards/models.py文件中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Board</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    description <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    subject <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    last_updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    board <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Board<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'topics'</span><span class="token punctuation">)</span>    starter <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">4000</span><span class="token punctuation">)</span>    topic <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Topic<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'posts'</span><span class="token punctuation">)</span>    created_at <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    updated_at <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    created_by <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'posts'</span><span class="token punctuation">)</span>    updated_by <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span></code></pre><p>上面所有模型都是django.db.models.Model类的子类，每个类都将被转换成数据库表。</p><h2 id="迁移模型"><a href="#迁移模型" class="headerlink" title="迁移模型"></a>迁移模型</h2><p>迁移模型就是告诉Django创建数据库，分两步</p><p>第一步，执行<code>python manage.py makemigrations</code>，执行完产生一个0000_initial.py文件，该文件代表了应用的当前状态，相当于做了一个汇总，为接下来转换数据库做准备。</p><p>第二步，执行<code>python manage.py migrate</code>，这一步根据迁移文件生成数据库。</p><h2 id="模型操作"><a href="#模型操作" class="headerlink" title="模型操作"></a>模型操作</h2><p>建好模型，就可以对它进行操作了。</p><p>操作之前，要先启动Python shell:</p><p><code>python manage.py shell</code></p><p>对模型进行操作的方法总结如下:</p><table><thead><tr><th>操作</th><th>代码示例</th></tr></thead><tbody><tr><td>创建一个对象而不保存</td><td>board = Board()</td></tr><tr><td>保存一个对象</td><td>board.save()</td></tr><tr><td>数据库中创建并保存一个对象</td><td>Board.objects.create(name=’..’,description=’..’)</td></tr><tr><td>列出所有对象</td><td>Board.objects.all()</td></tr><tr><td>通过字段标识获取单个对象</td><td>Board.objects.get(id=1)</td></tr></tbody></table><h2 id="设置Template"><a href="#设置Template" class="headerlink" title="设置Template"></a>设置Template</h2><p>在manage.py所在文件夹下新建templates文件夹，并新建文件home.html</p><p><strong>templates/home.html</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token entity" title="&#123;">&amp;#123;</span>% for board in boards %<span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token entity" title="&#123;">&amp;#123;</span>% endfor %<span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在<strong>settings.py</strong>里找到<code>TEMPLATES</code>变量，并设置<code>DIRS</code>为<code>os.path.join(BASE_DIR, &#39;templates&#39;)</code></p><p>然后，修改<strong>boards/views.py</strong>:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Board<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    boards <span class="token operator">=</span> Board<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'home.html'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'boards': boards&amp;#125;)</span></code></pre><h2 id="测试主页"><a href="#测试主页" class="headerlink" title="测试主页"></a>测试主页</h2><p>测试环节非常重要。比如测试主页的简单例子:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>urlresolvers <span class="token keyword">import</span> reverse<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase<span class="token keyword">class</span> <span class="token class-name">HomeTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_home_view_status_code</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEquals<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></code></pre><p>这是一个非常简单但非常有用的测试用例，测试的是请求URL后返回的响应状态码。状态码200意味着成功。当有很多个视图（比如上百个），<br>用上述测试，只需一个命令，就能够测试是否所有视图返回成功。如果没有自动化测试，我们就需要逐一检查每个页面。</p><p>若要查看更详细的信息，可以设置verbosity为2<br><code>python manage.py test --verbosity=2</code><br><code>verbosity为0表示无输出，为1表示正常输出，2表示详细输入</code></p><h2 id="静态文件设置"><a href="#静态文件设置" class="headerlink" title="静态文件设置"></a>静态文件设置</h2><p>静态文件是指CSS，JavaScript，字体，图片或者用来组成用户界面的任何其他资源</p><p>首先在<strong>manage.py</strong>所在文件夹下新建static文件夹.</p><p>然后，<a href="https://getbootstrap.com/docs/4.0/getting-started/download/#compiled-css-and-js">下载bootstrap</a>, 解压，将css/bootstrap.min.css放到static文件夹下</p><p>修改<strong>templates/home.html</strong>以应用Bootstrap CSS:</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% load static %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;% static <span class="token punctuation">'</span>css/bootstrap.min.css<span class="token punctuation">'</span> %&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb my-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thead-inverse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Board<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Posts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Last Post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span>% for board in boards %<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-muted d-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.description <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>align-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>align-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>          <span class="token entity" title="&#123;">&amp;#123;</span>% endfor %<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里原作者的结果图里表头(thead)是黑底白字，但我的不是，也不知道为啥，网上查了查，好像是thead-inverse的作用，<br>就是不知道为啥thead-inverse在我这里不起作用，后来查了CSS, 发现用下面的语句也可以起到表头黑底白字的作用(强迫症.jpg)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    th&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="Django-Admin"><a href="#Django-Admin" class="headerlink" title="Django Admin"></a>Django Admin</h2><p>执行<code>python manage.py createsuperuser</code>, 依次输入Username, Email, Password即可</p><p>启动服务后，访问<a href="http://127.0.0.1:8000/admin/可以看到登录页面，用刚刚设置的">http://127.0.0.1:8000/admin/可以看到登录页面，用刚刚设置的</a><br>用户名和密码可以登录, 登录进去以后可以完成一些操作。</p><h1 id="Part3-进阶"><a href="#Part3-进阶" class="headerlink" title="Part3 进阶"></a>Part3 进阶</h1><h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>Django项目里有一个root URLconf, 在settings.py里面可以找到<br><code>ROOT_URLCONF=&#39;myproject.urls&#39;</code>, 其中<code>myproject</code>是项目名称</p><p>Django的URL处理流程：</p><pre><code>request--&gt;urlpatterns--&gt;view function--&gt;html</code></pre><p>如果在urlpatterns里没有找到匹配的url，就返回404，Page Not Found</p><p>url function</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> view<span class="token punctuation">,</span> kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><h2 id="设置Topics页面"><a href="#设置Topics页面" class="headerlink" title="设置Topics页面"></a>设置Topics页面</h2><p>设置Topics页面需要如下三个步骤：</p><p><strong>首先</strong>，在<strong>url.py</strong>里添加新的URL路由:<br><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> boards <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>home<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^boards/(?P&lt;pk>\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>board_topics<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'board_topics'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#new</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>其次</strong>，在views.py里新建board_topics函数:<br><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Board<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># code suppressed for brevity</span><span class="token keyword">def</span> <span class="token function">board_topics</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#new</span>    board <span class="token operator">=</span> Board<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'topics.html'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'board': board&amp;#125;)</span></code></pre><p><strong>最后</strong>，在templates文件夹，新建topics.html:<br><strong>topics.html</strong></p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% load static %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;% static <span class="token punctuation">'</span>css/bootstrap.min.css<span class="token punctuation">'</span> %&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb my-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boards<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breadcrumb-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> board.name <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>其中, 在urls.py里面添加的语句里面比较重要，尤其是<code>?P&lt;pk&gt;\d+</code></p><h2 id="测试Topics页面"><a href="#测试Topics页面" class="headerlink" title="测试Topics页面"></a>测试Topics页面</h2><h2 id="可重用Templates"><a href="#可重用Templates" class="headerlink" title="可重用Templates"></a>可重用Templates</h2><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最新进度见&lt;a href=&quot;https://github.com/wmjtxt/Django-Learning-Notes&quot;&gt;https://github.com/wmjtxt/Django-Learning-Notes&lt;/a&gt;, 这里就不更新了。&lt;/p&gt;
&lt;p&gt;最近在学习Python，看小甲鱼的视频，并参考了&lt;a href=&quot;https://github.com/TwoWater&quot;&gt;TwoWater&lt;/a&gt;的&lt;a href=&quot;https://github.com/TwoWater/Python&quot;&gt;草根学Python&lt;/a&gt;, 其中提到了Django，和国外一个博客上的Django教程。遂开始学习Django.&lt;/p&gt;
&lt;h2 id=&quot;Django教程&quot;&gt;&lt;a href=&quot;#Django教程&quot; class=&quot;headerlink&quot; title=&quot;Django教程&quot;&gt;&lt;/a&gt;Django教程&lt;/h2&gt;&lt;p&gt;一个浅显易懂的Django教程: &lt;a href=&quot;https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/&quot;&gt;A Complete Beginner’s Guide to Django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该教程共包含7个部分（Part）,以搭建一个论坛为例子，较为详细地介绍了Django搭建流程。&lt;/p&gt;
&lt;p&gt;在Github上有关于它的中文翻译: &lt;a href=&quot;https://github.com/wzhbingo/django-beginners-guide&quot;&gt;A Complete Beginner’s Guide to Django 翻译计划&lt;/a&gt;, 不过只有前2个Part是完整翻译的，剩下的没翻译完，好像是中止了，所以后面的部分我都是看的英文原版)。&lt;/p&gt;
&lt;p&gt;根据教程一步一步执行命令，遇到问题并解决问题，虽然大多数问题是漏了某个步骤或某行代码，但在解决问题的过程中会仔细查看代码和步骤，这样就加深了理解。而且，由于其中涉及了不少HTML, CSS等相关&lt;br&gt;知识，需要的时候也去看看，学到不少。&lt;/p&gt;
&lt;p&gt;为防止遗忘，自己动手做一个简略版的记录，也方便以后需要的时候回看。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wmjtxt.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://wmjtxt.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>抗疫战争</title>
    <link href="https://wmjtxt.github.io/2020/04/11/kangyi/"/>
    <id>https://wmjtxt.github.io/2020/04/11/kangyi/</id>
    <published>2020-04-11T04:39:15.000Z</published>
    <updated>2020-04-16T13:28:55.419Z</updated>
    
    <content type="html"><![CDATA[<p>过年时，疫情爆发，武汉封城，全国禁足。那时候以为疫情最多一个月也就结束了，由于论文还没写完，在家写的实在太慢，感到很焦急，只希望疫情赶快结束，回校写论文。</p><span id="more"></span><p>后学校发通知，说3月1号前不开学，于是只能在家安心写论文，效率低也得慢慢挤。挤的是真的慢。3月1号左右才基本完成初稿，后来又查重，重复率很高，想尽各种办法降重，提交学校初检，然后送审。送审前的几天家里有点事，正文一点没改就交了。交完才发现，万一盲审不过，后面挺麻烦的，可已经送审出去，也没办法了，只能听天由命。</p><p>3月1日依旧没有开学的消息，甘肃省发通知说3月15日前不开学。3月15日依旧没消息，可能是受到国外疫情的输入病例影响，记得当时兰州有大概几十例，还有一例是从湖北返兰复工确诊的。一直到后来，甘肃省通知4月13日高三先开学，高校毕业年级可先开学，不过学校依旧没有消息。其实现在去学校也没啥事了，论文盲审要一个月左右，所以5.1之后开学也来得及。</p><p>前两天，在院群里让填一个问卷，说第二天研究开学事宜，不过后来还是没有消息。倒是又强调了一遍，不准擅自返校。</p><p>在国内拐点出现、湖北省外基本无新增、湖北新增陆续减少、国内新增降至100以内等等一系列好消息之后，我本以为开学在望，偏偏3月初国外疫情大爆发，远甚于国内，并且有一些国外输入病例。全国机场海关不得不严阵以待，严防输入病例。</p><p>另外，国内还零星发现一些病例，以及一些无症状感染者。自4月1日起，每日报告新增无症状感染者，并继续采取隔离措施（原本无症状的阳性就隔离，只是没公布数量）。现在每天会有几十例无症状感染者，主要还是来自湖北。由于无症状比较难以发现，容易在人群中悄然传播，所以依旧不能放松。这也是这个病毒真正厉害之处。在疫情爆发之初，就曾有无症状感染者，当时就觉得无症状也能传染，实在是防不胜防。我还担心会不会疫情因此难以有效控制，不过好在我国采取了几乎可以说完美的隔离防控措施，很快就控制住了疫情。之后无症状感染也被再提起，并引起重视。可谓乘胜追击，无往不胜。</p><p>国外的爆发，尤其是欧美等国家，实在是出人意料，说他们是猪脑子一点不为过。有我国的前车之鉴在先，他们不仅不重视，而且几乎是反其道而行之，似乎真觉得这病毒只感染亚洲人。</p><p>现在全球140多万，美国50万，拐点还不知道在哪。中国如今就是世界的诺亚方舟。但国外这么严重，我们也难以独善其身，一方面要派援助，捐赠或者出口物资和防护用品，一方面还得严防输入病例，全国上下不敢松一口气。</p><p>4月以来，部分省份的学校开始试点开学，这是对的，总不能一直不开学吧。只是开学后，一旦再发现病例，就要及时采取有效措施。比如隔离、封校等等。代价当然有，但总比坐吃等死强吧。</p><p>论文送审，暂时闲下来，看电视剧看电影玩游戏，真的颓废。</p><p>有时间要开始学学Python了，上次存了几个G的视频和资料，Github上也有不少资源，都可以参考。</p><p>fightingggggggggggggggggggggg</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过年时，疫情爆发，武汉封城，全国禁足。那时候以为疫情最多一个月也就结束了，由于论文还没写完，在家写的实在太慢，感到很焦急，只希望疫情赶快结束，回校写论文。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://wmjtxt.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="疫情" scheme="https://wmjtxt.github.io/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Python画直方图和点线图及Gephi的使用方法</title>
    <link href="https://wmjtxt.github.io/2020/02/29/Python-matplotlib/"/>
    <id>https://wmjtxt.github.io/2020/02/29/Python-matplotlib/</id>
    <published>2020-02-29T06:16:19.000Z</published>
    <updated>2020-04-16T13:28:42.187Z</updated>
    
    <content type="html"><![CDATA[<p>毕业论文里需要画图，先想到matlab，但之前的安装包用不了，网上有但几个G下载太慢。所以就用了Python。用Python也是一波三折，一开始matplotlib老是安装不了。后来还是在Windows10上弄成了。</p><p>另外，毕业论文是复杂网络社团检测相关的，所以要用Gephi画网络的社团结构划分图，也在这里记录一下。</p><span id="more"></span><h1 id="一、Python画直方图"><a href="#一、Python画直方图" class="headerlink" title="一、Python画直方图"></a>一、Python画直方图</h1><p>直接看例子吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> pylab <span class="token keyword">import</span> mplmpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#设置字体</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">]</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">]</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>        <span class="token punctuation">[</span>k<span class="token punctuation">,</span>d<span class="token punctuation">,</span>l<span class="token punctuation">,</span>p<span class="token punctuation">,</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span>        index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#data.hist()</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>rot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rot设置坐标轴文字的方向</span><span class="token comment" spellcheck="true">#data.plot.barh()</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Title"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#plt.ylim(0,0.8) #y轴的范围</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/zhifang.png" alt="直方图"></p><h1 id="二、Python画点线图"><a href="#二、Python画点线图" class="headerlink" title="二、Python画点线图"></a>二、Python画点线图</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> pylab <span class="token keyword">import</span> mplmpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">]</span>y1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">]</span>y2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span>y3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span>y4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下面几行的gbcr表示颜色</span><span class="token comment" spellcheck="true"># ×s^v表示点的格式</span><span class="token comment" spellcheck="true"># 后面的-表示画线，不加-的话只画点图了</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span><span class="token string">'g*-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">,</span><span class="token string">'bs-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y3<span class="token punctuation">,</span><span class="token string">'c^-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y4<span class="token punctuation">,</span><span class="token string">'rv-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>r<span class="token string">'$\mu$'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#x轴标签为希腊字母谬</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Q'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置x轴范围</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/dianxian.png" alt="点线图"></p><h1 id="三、Gephi的使用步骤"><a href="#三、Gephi的使用步骤" class="headerlink" title="三、Gephi的使用步骤"></a>三、Gephi的使用步骤</h1><p>以Karate网络为例</p><h4 id="1-添加网络的邻接表-格式为csv"><a href="#1-添加网络的邻接表-格式为csv" class="headerlink" title="1.添加网络的邻接表, 格式为csv"></a>1.添加网络的邻接表, 格式为csv</h4><p><img src="/images/matplotlib1.png" alt="1"><br>选择图的类型：无向的，选New workspace</p><h4 id="2-添加网络的社团划分-格式为csv"><a href="#2-添加网络的社团划分-格式为csv" class="headerlink" title="2.添加网络的社团划分, 格式为csv"></a>2.添加网络的社团划分, 格式为csv</h4><p><img src="/images/matplotlib3.png" alt="2"><br>选择图的类型：无向的，选Append to existing workspace</p><h4 id="3-调整参数，选择布局，调整网络图"><a href="#3-调整参数，选择布局，调整网络图" class="headerlink" title="3.调整参数，选择布局，调整网络图"></a>3.调整参数，选择布局，调整网络图</h4><p><img src="/images/matplotlib4.png" alt="3"></p><h4 id="4-结果"><a href="#4-结果" class="headerlink" title="4.结果"></a>4.结果</h4><p><img src="/images/karate.png" alt="karate"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕业论文里需要画图，先想到matlab，但之前的安装包用不了，网上有但几个G下载太慢。所以就用了Python。用Python也是一波三折，一开始matplotlib老是安装不了。后来还是在Windows10上弄成了。&lt;/p&gt;
&lt;p&gt;另外，毕业论文是复杂网络社团检测相关的，所以要用Gephi画网络的社团结构划分图，也在这里记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wmjtxt.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://wmjtxt.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>浅析软链接与硬链接</title>
    <link href="https://wmjtxt.github.io/2019/11/05/ln/"/>
    <id>https://wmjtxt.github.io/2019/11/05/ln/</id>
    <published>2019-11-05T03:26:42.000Z</published>
    <updated>2020-04-16T13:28:22.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>Linux系统中的文件包含两个部分：用户数据(user data)与元数据(metadata)。用户数据存放文件的内容，元数据则存储文件的属性。<br>元数据中的inode号是文件的唯一标识, 而不是文件名。其实，一个inode号对应一个或多个文件名，这就是<strong>硬链接(hard link)</strong>。因此，<br>硬链接可以理解为同一个文件的多个别名。而<strong>软链接(soft link)</strong>则是文件的用户数据存放指向另一个文件的指针，它拥有自己的inode号。软链接与Windows系统的快捷方式很相似。</p><span id="more"></span><h1 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h1><ul><li>创建软链接(soft link): <code>ln -s file softfile</code></li><li>创建硬链接(hard link): <code>ln file hardfile</code> or <code>link file hardfile</code></li></ul><h1 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h1><ul><li>软链接 : 文件类型为符号链接，文件中存放有一个指向原文件路径的指针</li><li>硬链接 : 下为VFS中的inode结构体<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> inode<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">const</span> <span class="token keyword">struct</span> inode_operations   <span class="token operator">*</span>i_op<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引节点操作</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span>                   i_ino<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引节点号</span>  atomic_t                        i_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引用计数器</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>                    i_nlink<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//硬链接数目</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>创建硬链接后，i_nlink加1</li></ul><h1 id="区别与联系-简述"><a href="#区别与联系-简述" class="headerlink" title="区别与联系(简述)"></a>区别与联系(简述)</h1><ul><li>软链接是新建一个文件，硬链接是为文件建一个别名。</li><li>软链接可以跨文件系统，硬链接不可以。</li><li>软链接可以对目录操作，硬链接不可以。</li><li>删除原文件，软链接失效，硬链接不影响。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;p&gt;Linux系统中的文件包含两个部分：用户数据(user data)与元数据(metadata)。用户数据存放文件的内容，元数据则存储文件的属性。&lt;br&gt;元数据中的inode号是文件的唯一标识, 而不是文件名。其实，一个inode号对应一个或多个文件名，这就是&lt;strong&gt;硬链接(hard link)&lt;/strong&gt;。因此，&lt;br&gt;硬链接可以理解为同一个文件的多个别名。而&lt;strong&gt;软链接(soft link)&lt;/strong&gt;则是文件的用户数据存放指向另一个文件的指针，它拥有自己的inode号。软链接与Windows系统的快捷方式很相似。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://wmjtxt.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://wmjtxt.github.io/tags/Linux/"/>
    
      <category term="技术" scheme="https://wmjtxt.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>C++多线程并行计算</title>
    <link href="https://wmjtxt.github.io/2019/09/15/multiThread/"/>
    <id>https://wmjtxt.github.io/2019/09/15/multiThread/</id>
    <published>2019-09-15T15:00:28.000Z</published>
    <updated>2020-04-11T05:04:38.291Z</updated>
    
    <content type="html"><![CDATA[<p>关于多线程一直没有搞懂，最近面试也被问到C++11的thread和linux的pthread，由于我之前只用过pthread，连thread咋用都不知道，<br>后来看了thread的用法，编译的时候也要加-lpthread，难道底层是pthread？无从得知，网上也找不到。可能只是部分用到了pthread吧。<br><span id="more"></span></p><p>为了搞懂多线程，就想找个题目实践一下。</p><p>然后我就找到一篇博客，用Java写的多线程并行计算的代码，就是简单的求1到N的和，N是90000000。<br>那篇博客地址:<a href="https://blog.csdn.net/whandwho/article/details/80159377">https://blog.csdn.net/whandwho/article/details/80159377</a></p><p>于是我就想用C++的多线程来实现一下。</p><p>就找到了这篇博客<a href="https://blog.csdn.net/whandwho/article/details/80159377">https://blog.csdn.net/whandwho/article/details/80159377</a>, 里面用C++的thread实现了并行加法，<br>稍作改动，便解决了上面的问题。</p><p>然后，考虑用pthread来实现, 毕竟我之前做项目有用过pthread, 对它还算熟悉。经过好一番折腾，总算是做出来了。</p><p>下面奉上代码和运行结果比较。<br>为了方便对比，一开始就写了单线程计算的，其实后来多线程版本都支持输入线程数, 但方便对比就按原来的吧。<br>另外，N设为900000000，也就是9亿，比那个Java的多个0。</p><h2 id="运行结果1-单线程，thread和pthread"><a href="#运行结果1-单线程，thread和pthread" class="headerlink" title="运行结果1 : 单线程，thread和pthread"></a>运行结果1 : 单线程，thread和pthread</h2><p><img src="/images/thread1.png" alt="pic1"></p><h2 id="运行结果2-thread和pthread，不同线程数"><a href="#运行结果2-thread和pthread，不同线程数" class="headerlink" title="运行结果2 : thread和pthread，不同线程数"></a>运行结果2 : thread和pthread，不同线程数</h2><p><img src="/images/thread2.png" alt="pic2"><br>可以看到，开启8个线程比开3个线程更快。事实上，我试了很多，基本上8个线程是最快的，这道题属于密集计算型任务，线程数跟CPU核心数量一样比较好。<br>还有，thread和pthread的速度也差不多。</p><h3 id="1-单线程"><a href="#1-单线程" class="headerlink" title="1.单线程"></a>1.单线程</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 900000000</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t start_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"开始时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> elapsed_seconds <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t end_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum     = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结束时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用    时: "</span> <span class="token operator">&lt;&lt;</span> elapsed_seconds<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2-std-thread"><a href="#2-std-thread" class="headerlink" title="2.std::thread"></a>2.std::thread</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> N <span class="token operator">=</span> <span class="token number">900000000</span><span class="token punctuation">;</span>mutex m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> from<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> to<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ret <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span><span class="token string">"线程ID："</span><span class="token operator">&lt;&lt;</span> this_thread<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token string">", ret="</span><span class="token operator">&lt;&lt;</span>ret<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CPU核心个数       : "</span> <span class="token operator">&lt;&lt;</span> thread<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入启动线程个数: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计时</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>future<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">>></span> result<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t start_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"开始时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">async</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> i<span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> elapsed_seconds <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t end_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum     = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结束时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用    时: "</span> <span class="token operator">&lt;&lt;</span> elapsed_seconds<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-pthread"><a href="#3-pthread" class="headerlink" title="3.pthread"></a>3.pthread</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> N <span class="token operator">=</span> <span class="token number">900000000</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> A<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a_t<span class="token punctuation">,</span> <span class="token operator">*</span>pa_t<span class="token punctuation">;</span>pthread_mutex_t mutex<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      pa_t at <span class="token operator">=</span> <span class="token punctuation">(</span>pa_t<span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> from <span class="token operator">=</span> at<span class="token operator">-></span>from<span class="token punctuation">,</span> to <span class="token operator">=</span> at<span class="token operator">-></span>to<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> from<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> to<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ret <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//cout &lt;&lt; "from = " &lt;&lt; from &lt;&lt; ", to = " &lt;&lt; to &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "ret = " &lt;&lt; ret &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt;"线程ID："&lt;&lt; pthread_self() &lt;&lt; "    sum="&lt;&lt;ret&lt;&lt; endl;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CPU核心个数       : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">sysconf</span><span class="token punctuation">(</span>_SC_NPROCESSORS_CONF<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入启动线程个数: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    pthread_t pthid<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> to<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计时</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t start_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"开始时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        a_t arg<span class="token punctuation">;</span>        arg<span class="token punctuation">.</span>from <span class="token operator">=</span> i<span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">;</span>        arg<span class="token punctuation">.</span>to <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token operator">/</span>n<span class="token punctuation">;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pthid   = "</span><span class="token operator">&lt;&lt;</span> pthid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span>  <span class="token string">", ret = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> elapsed_seconds <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>time_t end_time <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>chrono<span class="token punctuation">:</span><span class="token punctuation">:</span>system_clock<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_time_t</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum     = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结束时间: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用    时: "</span> <span class="token operator">&lt;&lt;</span> elapsed_seconds<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于多线程一直没有搞懂，最近面试也被问到C++11的thread和linux的pthread，由于我之前只用过pthread，连thread咋用都不知道，&lt;br&gt;后来看了thread的用法，编译的时候也要加-lpthread，难道底层是pthread？无从得知，网上也找不到。可能只是部分用到了pthread吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wmjtxt.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="C++" scheme="https://wmjtxt.github.io/tags/C/"/>
    
      <category term="多线程" scheme="https://wmjtxt.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>京东面试风波之后续</title>
    <link href="https://wmjtxt.github.io/2019/09/06/interview4/"/>
    <id>https://wmjtxt.github.io/2019/09/06/interview4/</id>
    <published>2019-09-06T14:51:39.000Z</published>
    <updated>2020-04-16T13:28:08.887Z</updated>
    
    <content type="html"><![CDATA[<p>其实我知道，即使我通过了所有面试，进入池子里面，大概率也会被刷。但是那至少是合理的流程, 如果那样，我会心服口服。<br><span id="more"></span></p><p>前面说了，京东校招组给我回复了邮件。但我没有给他（她）回复，一是不知道说什么，二是我觉得我说什么其实都没什么用了。<br>我是几乎肯定以为他们会以怎样圆滑的方式来说服我接受这个结果。最小概率的情况，也是我仅有的一丝丝希望，就是我还能有机会进入京东最终的备胎池里。</p><p>但又觉得，如果那样，又有种奇怪的感觉。就好像买东西，有很多顾客买到了假货（或者说是有瑕疵的货物），只有我去找店家理论了，最终店家也只给我一个人换了货。<br>我的本意并不是这样。我的确很缺这样的机会，但我更在意的是，一件事情是否公平合理，何况这是与我极其相关的一件事。</p><p>杜甫有一句话，可能我不配说，但那话说的真好，大家也都知道，“安得广厦千万间，大庇天下寒士俱欢颜”。遇到一件事，不能只想到自己。</p><p>废话不多说了，说结果吧。</p><p>今天从西安回来的高铁上，接到京东校招组一位工作人员的电话，因为车上信号不稳定，就说好下车后我再打给她。</p><p>经历高铁加地铁，回到宿舍我才回电话，这时已经是两个小时后。她跟我详细说明了情况，并解释说是HR搞错了他们公司校招的原则，并不存在所谓“但凡是有工作经历的人就不能参加他们的校招”的说法，也跟复试面试官核实了我前面的面试没什么问题。</p><p>如下图所示，hr应该是误解了应届生身份的问题。<br><img src="/images/jd_help.png" alt="京东帮助"></p><p>她讲到这里，其实我就明白了。跟我原来想的那一丝丝希望是如此的相像。她说给我改了状态。还是很开心的，只是我没有太表现出来。不过，她也解释了后续还会进行筛选，我说我了解的。</p><p>临了，她也很客气说，有事随时可以联系她。我说，好的谢谢你。</p><p>我该高兴的，但并不稳，甚至可以说非常不稳，所以又高兴不起来。</p><p>好累啊，有希望却希望不大。</p><p>晚上，又收到滴滴的面试邀请，过几天还得去西安。钱包咕咕在叫了。</p><p>最后，我去查了状态，果然变了哈<br><img src="/images/jd_status.png" alt="京东面试结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我知道，即使我通过了所有面试，进入池子里面，大概率也会被刷。但是那至少是合理的流程, 如果那样，我会心服口服。&lt;br&gt;
    
    </summary>
    
      <category term="面经" scheme="https://wmjtxt.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>京东HR面挂——一个出乎所有人意料的原因</title>
    <link href="https://wmjtxt.github.io/2019/09/05/jdinterview3/"/>
    <id>https://wmjtxt.github.io/2019/09/05/jdinterview3/</id>
    <published>2019-09-05T12:35:19.000Z</published>
    <updated>2020-04-16T13:27:55.143Z</updated>
    
    <content type="html"><![CDATA[<p>9月3号早上面试后，我因为答得还不错，所以心情很好，以为京东稳了。后来在牛客网了解到京东HR面还要刷不少人，才觉得事情不妙，<br>但仍觉得应该问题不大。事实证明我还是太过于自信了。<br><span id="more"></span></p><p>中间还有很多插曲，太复杂就不详述了，直接说结果吧。HR面试完（电面），我还觉得回答的不错，应该问题不大，准备跟室友出去吃饭。顺手刷新了一下京东校招官网的状态，<br>醒目的灰色的令人沮丧的“HR面试未通过映入眼帘”，还没等室友看到，我就迅速关掉了网页。因为实在想不通为什么会被挂，所以我就给HR发了短信询问（没有打电话是怕打扰她，<br>也担心我情绪过于激动，表述不当）。</p><p>我以为就这样石沉大海了，没想到的是，没过多久，HR就打电话过来了。她解释说是因为我有几年的工作经历，所以是不能参加他们的校招的。<br>我表示很惊讶，简直闻所未闻，以前真没听说过还有这样的说法！然后，HR说前面两轮面试我表现的不错，但很可惜，由于这个原因无法给我通过。还说我可以参加社招。最后，可能是看我<br>还是难以接受，她说我可以发邮件跟京东校招组反馈这个事情。然后，谢谢再见，挂了电话。</p><p>这个时候，心情好了一些。说实话HR打电话过来我还挺惊讶的，她人真的挺好的。后来我跟室友也说了这个情况，大家好一阵感慨，甚至有些打退堂鼓：秋招怎么这么难啊？！不如回家种田算了！</p><p>不过抱怨归抱怨，我想了想，还真应该跟京东校招组反馈一下。就算说了没有用，我也要说，因为真的不合理。写了有几百字，详细陈述了这个事情，自认为言辞还算恳切，点击发送。仍然做好<br>石沉大海不被回复的准备。</p><p>后来去参加宣讲会，人真的超级超级多。找工作太难了。还要再努力点才行。</p><p>大概到了晚上，京东校招组回复邮件了。说会了解情况再给我回复，但其实我不抱什么希望了。</p><p>其实我也不是有多优秀，所有可能我压根配不上去大厂吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9月3号早上面试后，我因为答得还不错，所以心情很好，以为京东稳了。后来在牛客网了解到京东HR面还要刷不少人，才觉得事情不妙，&lt;br&gt;但仍觉得应该问题不大。事实证明我还是太过于自信了。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://wmjtxt.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>京东二面</title>
    <link href="https://wmjtxt.github.io/2019/09/03/jdinterview2/"/>
    <id>https://wmjtxt.github.io/2019/09/03/jdinterview2/</id>
    <published>2019-09-03T03:23:32.000Z</published>
    <updated>2020-04-16T13:27:33.167Z</updated>
    
    <content type="html"><![CDATA[<p>幸运进入复试，还是通知去现场面，我又申请远程，然后面试官给我发邮件，说加微信面试。在牛客网看到有人说申请远程面试被拒绝，看来我还是幸运的，碰到的面试官都很好。<br><span id="more"></span></p><p>快到约定时间的时候，面试官发短信说延迟十到十五分钟，后来又说随时联系我。</p><p>大概9点半，开始面试。</p><ul><li>1.STL的底层实现，是不是线程安全的</li><li>2.int a[256]; char b[256]; sizeof(a), sizeof(b)分别是多大</li><li>3.vector底层实现</li></ul><p>然后，面试官说，来做道题吧。</p><ul><li>4.手写一个queue。10min</li></ul><p>写好后，拍照片，发给他，然后解释(手写程序，真的很乱)。</p><p>然后，面试官说，那再来一道吧。</p><ul><li>5.有n个数组，每个数组有m个升序排好的数，将所有数排序。15min</li></ul><p>我的方法复杂度是O(m*n<sup>2</sup>)，然后他问可以优化吗，我说可以用堆排序(其实建个堆就行，不需要堆排序)优化，又问具体怎么做……<br>其实我没想清楚都，最后在他提示下才明白，建个堆就好，复杂度提高到O(m*n*logn)。</p><p>然后面试官说就到这里。好突然的感觉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幸运进入复试，还是通知去现场面，我又申请远程，然后面试官给我发邮件，说加微信面试。在牛客网看到有人说申请远程面试被拒绝，看来我还是幸运的，碰到的面试官都很好。&lt;br&gt;
    
    </summary>
    
      <category term="面经" scheme="https://wmjtxt.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="面经" scheme="https://wmjtxt.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>京东一面</title>
    <link href="https://wmjtxt.github.io/2019/09/01/jdinterview/"/>
    <id>https://wmjtxt.github.io/2019/09/01/jdinterview/</id>
    <published>2019-09-01T02:36:03.000Z</published>
    <updated>2020-04-16T13:27:19.010Z</updated>
    
    <content type="html"><![CDATA[<p>笔试做的一般，编程两道都没AC。运气好还是收到了京东的面试通知，很惊讶，又暗自叹息恐怕还是抓不住。但也要加油啊。</p><span id="more"></span><p>时间很快来到9月1号早上，面试官的电话如约而至，甚至还提前了几分钟。</p><p>不出意外，一面问的很基础，总体答的还行，裸面居然挺过来了。可我自知，如果再问深一点，可能就答不上来了。</p><p>临了说应该会有后续通知，我想我得再突击一下了。</p><p>下面简单总结一下面试的知识点：</p><ul><li>1.new和malloc(这个几乎逢面必问, 没认真总结过，总感觉每次都说的不全)</li><li>2.new申请内存失败返回什么，malloc呢</li><li>3.在C++里，struct和class的区别</li><li>4.static的作用</li><li>5.如何理解static变量具有文件作用域</li><li>6.C++里的多态</li><li>7.虚函数</li><li>8.虚函数底层实现, 以及如何实现多态的</li><li>9.fread, fwrite, fprintf 区别</li><li>10.线程锁(我答了互斥锁，读写锁，他说还有自旋锁，我说没有用过, 看来知识还是要知道全才好)</li><li>11.explicit, 举例, 我举了string str = “hello”;这个, 他问explicit加在哪里，记不清了，我就说复制构造，他说构造函数，好吧</li><li>12.大端和小端，什么时候需要注意</li><li>13.知道哪些排序，说了快排、堆排序、归并，稳定的含义，哪些是稳定的</li><li>14.c里的哪些函数(比如random)可以在多线程里用</li><li>15.可重入函数，直接说了不了解</li><li>16.STL里有哪些序列容器, vector和list的区别</li><li>17.linux命令，查找当前文件夹及子文件夹下，三天内修改过的文件，我说用find，他就不让说了???</li><li>18.最后问项目里我负责哪些部分，我说去重和倒排索引，简单说了说，没聊太深(太深我也记不清了)</li><li>19.(补一个)软连接和硬链接</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔试做的一般，编程两道都没AC。运气好还是收到了京东的面试通知，很惊讶，又暗自叹息恐怕还是抓不住。但也要加油啊。&lt;/p&gt;
    
    </summary>
    
      <category term="面经" scheme="https://wmjtxt.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>美团面试</title>
    <link href="https://wmjtxt.github.io/2019/08/27/meituan-interview/"/>
    <id>https://wmjtxt.github.io/2019/08/27/meituan-interview/</id>
    <published>2019-08-27T01:20:35.000Z</published>
    <updated>2020-04-16T13:27:01.878Z</updated>
    
    <content type="html"><![CDATA[<p><strong>后续</strong>：二面很惨，不说了，学习去了QAQ</p><span id="more"></span><p><strong>背景</strong>：投了之后也没管，可能是内推，然后周五下午突然接到电话，约电话面试，问我哪天有空，惊讶+紧张之余，我说要不就明天吧(我怕拖太久机会溜走了，毕竟是秋招的第一个面试啊),<br>    然后他说明天周末啊，我们(美团)周末休息，约工作时间吧，那我说下周一吧，他说那好，周一早上10点半行吧，我说好。挂了电话才想起了周末有浦发的面试，要去西安，周一早上赶回来没多少时间准备了。瞬间觉得完了，但也不好意思打电话改时间了。<br>    就想硬着头皮上吧。</p><p>这还没完呢，周六是京东的笔试，周末是快手和头条的笔试。周末去西安的高铁上还做了几套快手往年的笔试题，然后紧赶慢赶提前到达面试地点，还算顺利地面试完，下午4点半，刚好快手的笔试开始，可是没有找到有网的地方，只能放弃。后来找了家网吧，等到7点做了头条的笔试。然后去西安城墙看了看，就坐火车回学校了。</p><p>然后本来8点到站的火车晚点了一个小时，绿皮火车真是卑微啊，都快到站了，也没有资格进站，要在一个小站苦等。等的时候，有几个女声跟乘务员说她们到站还要转火车，赶不上的话怎么改签，乘务员欢快地回应说你们去7车找列车长说, 要不怎么体现他列车长的作用。等的时候无聊，我也简单看了下面经，想着回去应该还有时间看看基础知识。到站后下车出站，还下雨了，赶上公交，吃了早饭，9点半赶回宿舍。跟室友唠了两句，然后讨论头一天的头条编程题，突然接到电话，是那个熟悉的号码，心想惨了，一点没准备啊（这时才10点05分左右）。这一面就是一个小时。</p><p>面试时随便记在一张纸上，所以比较乱。</p><p>一面(电面)</p><ul><li>1.自我介绍</li><li>2.malloc与new</li><li>3.先问知不知道C++11,我说知道点，然后问了智能指针, 说了share_ptr,weak_ptr, 问share_ptr跟普通指针比有什么优点，说了更安全，问还有什么，我说不知道了</li><li>4.问会不会STL,我说会一点, 然后问map和multimap, multimap的底层实现, 我说都是他们红黑树，但不知道multimap具体怎么实现,<br>  然后问如果是我会怎么去实现，我说对相等节点建立开链来实现。(回头好好看看STL去)</li><li>5.平衡树(应该就是指AVL)和红黑树, 为什么红黑树应用更广泛</li><li>6.完全二叉树和满二叉树，这里还有点插曲，我说满二叉树节点数2^n-1, 他说不对，然后说后面看书上怎么说，也可能他记错了(后来证明就是他错了)</li><li>7.堆排序过程</li><li>8.TCP三次握手, 以及为什么必须有第三次的ACK. 然后接着还问了全双工, 半双工和单工</li><li>9.计算机网络各个协议的端口号，这个没答出来，TCP的都忘了……我说TCP的记不清了，FTP的是20,21，HTTP的是80（其实模模糊糊的也不知道对不对）</li><li>10.进程和线程的区别, 多线程相对于多进程的优势和缺点，缺点我说了多线程，当其中一个线程挂掉，该线程所属进程就会挂掉，问为什么，我说不知道..</li><li>11.多线程，读多写少的情况（比如平均读1000次写1次）怎么处理。后来实在不会, 问我知道读写锁吗，我说知道，但不会用, 说可以去了解下+-+</li><li>12.然后结合项目问，客户端连接服务器的时候，能ping通但是连不上服务器, 会是什么原因？答有可能到最大连接数了，问还有呢？不知道，最后他问我知道防火墙吗，我说听说过，但不清楚原理，然后他还给我解释了一下</li><li>13.客户端给服务器发送数据(send)的时候，突然服务器断开，此时send返回什么, 记不清了，我答的是要么0要么-1</li><li>14.signal</li><li>15.epoll</li><li><p>16.socket阻塞与非阻塞, 这个真忘了，没说出来，他说没事，如果想不起来的也不要瞎说，瞎说反而给面试官印象不好</p></li><li><p>最后问我有什么问题，就简单问了他们的面试批次什么的</p></li><li><p>然后下午还在睡觉，就来电话，没接到，我又打过去，没通，又打过来，说我过了，下一面是视频面，约个时间，我说那周四吧，说那好周四上午10点半。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;后续&lt;/strong&gt;：二面很惨，不说了，学习去了QAQ&lt;/p&gt;
    
    </summary>
    
      <category term="面经" scheme="https://wmjtxt.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="面经" scheme="https://wmjtxt.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Git Rebase的用法</title>
    <link href="https://wmjtxt.github.io/2019/08/18/rebase/"/>
    <id>https://wmjtxt.github.io/2019/08/18/rebase/</id>
    <published>2019-08-18T11:25:12.000Z</published>
    <updated>2020-04-16T13:26:23.862Z</updated>
    
    <content type="html"><![CDATA[<p>其实我用Git不多，<code>git rebase</code>命令之前也都没听说过，偶然在牛客网看面经看到有人说面试官问<code>git rebase</code>和<code>git merge</code>的区别。才想到去了解一下它。</p><span id="more"></span><p>廖雪峰的官方网站上有提到<code>git rebase</code>的用法<sup>[1]</sup>，并举了一个例子，但他的例子不好，评论里也有人说到。<br>评论里有位同学详细说了<code>git rebase</code>的用法, 说得很好, 摘抄如下：</p><hr><p>一开始按照教程演示去操作，因为两个目录修改的不是同一文件，<code>git pull</code> 后直接合并了没有冲突，所以git rebase有效果。如果<code>git pull</code>后提示有冲突后，先不管冲突的代码，因为修改后执行rebase还是变回有冲突的代码。先执行<code>git add .</code>和<code>git commit -m &#39;xxx&#39;</code>。在执行git rebase 终端提示：Resolve all conflicts manually, mark them as resolved with “git add/rm &lt;conflicted_files&gt;”, then run “git rebase –continue”。这时再手动修改代码解决冲突，执行<code>git add .</code> 再执行 <code>git rebase --continue</code>就有效果了。这时直接<code>git push</code>到远程仓库即可</p><hr><p>按照廖雪峰以及那位同学的评论还有Git官网文档，我总结一下<code>git rebase</code>的用法</p><h2 id="什么时候用到git-rebase"><a href="#什么时候用到git-rebase" class="headerlink" title="什么时候用到git rebase"></a>什么时候用到<code>git rebase</code></h2><p>当多人在同一个分支协作时，后push的同学需要先<code>git pull</code>，如果出现冲突，还要先处理合并文件，然后再push, 这时就算merge完成了，然后你通过<code>git log --graph --pretty-oneline --abbrev-commit</code>查看提交历史，会发现提交历史有分叉, 初一看有点眼花缭乱的感觉。而<code>git rebase</code>通过一系列操作, 可以将提交历史改为一条直线, 看起来清晰一点。</p><h2 id="git-rebase的用法"><a href="#git-rebase的用法" class="headerlink" title="git rebase的用法"></a><code>git rebase</code>的用法</h2><p><strong>第一种情况: 修改的不是同一个文件</strong>，执行<code>git pull</code>后没有冲突，接着直接执行<code>git rebase</code>就可以了。</p><p>第一种情况只需执行两条命令:</p><pre class=" language-c"><code class="language-c">git pullgit rebase</code></pre><p><strong>第二种情况: 修改同一个文件, 出现冲突</strong>，这时执行<code>git pull</code>后，会显示需要你手动更改冲突文件，先不要改，而是先执行<code>git add x</code>和<code>git commit -m &quot;y&quot;</code>, 然后再执行<code>git rebase</code>, 然后将冲突文件里的\&lt;\&lt;\&lt;\&lt;HEAD那些无关内容删掉即可, <strong>千万不要做其他改动</strong>，然后执行<code>git rebase --continue</code>就可以了。</p><p>第二种情况需要以下6步</p><pre class=" language-c"><code class="language-c">git pullgit add x <span class="token comment" spellcheck="true">//x是冲突文件</span>git commit <span class="token operator">-</span>m <span class="token string">"y"</span> <span class="token comment" spellcheck="true">//y是那个什么</span>git rebase将冲突文件里的<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span>HEAD那些无关内容删掉git rebase <span class="token operator">--</span><span class="token keyword">continue</span></code></pre><p>参考：</p><p>[1] <a href="https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648">廖雪峰的官方网站_Git教程_Rebase及评论区</a></p><p>[2] <a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git官方文档之分支-变基</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我用Git不多，&lt;code&gt;git rebase&lt;/code&gt;命令之前也都没听说过，偶然在牛客网看面经看到有人说面试官问&lt;code&gt;git rebase&lt;/code&gt;和&lt;code&gt;git merge&lt;/code&gt;的区别。才想到去了解一下它。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://wmjtxt.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wmjtxt.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>七月刚来，已经走远</title>
    <link href="https://wmjtxt.github.io/2019/07/07/july/"/>
    <id>https://wmjtxt.github.io/2019/07/07/july/</id>
    <published>2019-07-07T11:31:44.000Z</published>
    <updated>2020-04-16T13:26:00.994Z</updated>
    
    <content type="html"><![CDATA[<p>明天回家。<br><span id="more"></span></p><p>本来准备7月5号回家的，9号去参加同学的婚礼，顺利的话中间还能去趟洛阳。<br>可是4号一大早被老师喊去实验室，一忙就是整整4天。<br>除了实验室的事情，这几天就是折腾系统，其他啥也没干。<br>之前的deepin系统（也就是现在在用的）总算是迁移到了新电脑上。以后就少折腾系统，挺麻烦的，也没啥意义。<br>win10也碰到个问题，不过已经解决，这里就不说了。</p><p>可能七月底才能回学校，而且那时实验室还不一定能装修好，所以可能还是得去图书馆学习。<br>一定要去图书馆。<br>过去的俩月没怎么取图书馆，几乎等于荒废了，在宿舍的学习效率太低了。<br>亡羊补牢，为时不晚。<br>在家也要保持状态，比如刷个题什么的，每天一两个小时就可以。</p><p>Fighting</p><p>ps : 对了，有个地方可以说一下，Deepin clone克隆后的系统，跟原系统相当于是一个系统。<br>比如：他们的Github仓库就是共用的；两个系统同时引导，克隆系统会把原系统覆盖掉。还不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明天回家。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://wmjtxt.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>nc出问题了吗，老是Connection Refused</title>
    <link href="https://wmjtxt.github.io/2019/06/30/nc-Connection-refused/"/>
    <id>https://wmjtxt.github.io/2019/06/30/nc-Connection-refused/</id>
    <published>2019-06-30T14:45:35.000Z</published>
    <updated>2020-04-16T13:25:44.978Z</updated>
    
    <content type="html"><![CDATA[<p><strong>已解决</strong></p><span id="more"></span><p>原来是没有加-p的原因，估计是deepin装的netcat版本太老了。<br>解决办法: 启动nc服务的时候在端口号前加上-p参数:<code>nc -l -p 2000</code>，就可以了。</p><p>以下是原文：</p><p>执行以下最简单的命令：</p><pre class=" language-shell"><code class="language-shell">nc -l 2000nc 192.168.1.101 2000</code></pre><p>就出现这个错误:<br><code>(UNKNOWN) [192.168.1.101] 2000 (cisco-sccp) : Connection refused</code></p><p>在虚拟机上试了，还是同样的错误。</p><p>启动我自己写的ftp server</p><p><code>./server 192.168.1.101 2000 5 10</code></p><p>再执行</p><p><code>nc 192.168.1.101 2000</code></p><p>可以连接成功。</p><p>但先执行</p><p><code>nc -l 2000</code></p><p>再启动ftp client</p><p><code>./client 192.168.1.101 2000</code></p><p>仍会出现上面的错误。</p><p>所以推测应该是nc的服务器没有正常启动或者类似的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;已解决&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="电脑配置" scheme="https://wmjtxt.github.io/categories/%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="问题" scheme="https://wmjtxt.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>克隆Deepin系统</title>
    <link href="https://wmjtxt.github.io/2019/06/27/cloneDeepin/"/>
    <id>https://wmjtxt.github.io/2019/06/27/cloneDeepin/</id>
    <published>2019-06-27T08:08:26.000Z</published>
    <updated>2020-04-16T13:23:02.511Z</updated>
    
    <content type="html"><![CDATA[<p>换了新电脑，就想把原来的系统迁移到新电脑上，毕竟新配置一个系统还是挺麻烦的。在论坛搜了一下，看到有说可以clone分区。然后就试了试，开始遇到一些问题，不过后来还是成功了。<br><span id="more"></span></p><p>想看具体步骤可以跳转到<a href="#实施步骤">实施步骤</a>，或者<a href="#精简版">精简版</a> 。</p><p>新电脑是AMD锐龙处理器，自带Windows10，原Deepin系统是在大小110G左右的固态硬盘上，需要把它克隆到一个238G左右的移动固态硬盘。</p><p>然后就遇到一个问题：克隆完成后，将238G的硬盘连到新电脑，无法从该硬盘启动，Boot Device只显示电脑自带的硬盘而不显示外接硬盘，不知道是新电脑的问题还是锐龙处理器的问题，总之就是没办法启动克隆的系统。</p><p>所谓兵来将挡水来土掩，问题总是有解决的办法，很快就想到一个：那就是在电脑自带的硬盘安装一个Deepin系统，由它来引导。果不其然，安装好以后，再启动的时候就可以看到238G硬盘上的系统了，启动它也没什么问题。这样，克隆系统就大功告成。</p><p>ps : 一直以来，我都是用Windows10+Deepin双系统，efi引导启动(引导这块不太懂，我是先装好Windows10，再安装Deepin，然后开机就看到引导界面了，所以应该是Deepin自带的引导程序)。</p><p>至于，为什么我不用Deepin 15.10(以下简称15.10)了？其实先前是打算趁这次换电脑改用Deepin 15.10而放弃原来的Deepin 15.9(下称15.9)的(从15.5开始用，一路升级到15.9)，因为15.10是第一个stable版本，而且原来的unstable版本官方好像是今年7月以后不再更新了。</p><p>所以新电脑一到，我就在238G移动固态上安装了15.10，一开始没发现什么大问题，只是<strong>引导有点问题</strong>：每次从Windows10重启，无法正常进入引导界面。这也许是本地硬盘Windows10+移动硬盘Deepin的问题，也可能是AMD处理器的问题。</p><p>另外，在安装一个vim插件的时候（vim-instant-markdown），需要安装nodejs，而在15.10安装nodejs默认版本是4.8，在15.9安装是8.11，不知道是不是由于这个原因，总之结果就是<strong>vim-instant-markdown在15.10用不了</strong>，尝试了各种方法结果还是不行。</p><p>综上，我就决定暂时放弃15.10了，虽然[解决办法]里在新电脑自带硬盘安装的系统是15.10，但那只是工具而已，以后的主力系统还是15.9。或许以后还有机会再用15.10或者别的linux系统。</p><h3 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h3><p>大致说一下实施步骤，因为我先后尝试了多次，所以这里就不赘述，只说我认为是必要的步骤，如果遇到问题，欢迎留言交流。</p><ul><li><p>1.准备工作</p><ul><li><p>原始系统，简称<strong>Deepin-老大</strong>；目标系统，也就是克隆系统，简称<strong>Deepin-小二</strong>。</p></li><li><p>一个第三方Deepin系统（我是在另一个移动机械硬盘上安装过一个Deepin 15.7，正好派上用场），简称<strong>Deepin-小三</strong>。<br>用live系统应该也可以，不过我没有试。如果在Deepin-老大上执行clone操作的话，会提示有个错误，好像是让你重启进入live系统再clone（我第一次是这样弄的，记不太清了，后来都是在第三方系统clone的）。</p></li><li><p>安装Clone软件（中文名是备份还原工具），在深度商店里就有。</p></li><li><p>在新电脑自带硬盘压缩出一个60G大小的空间并新建分区（这个过程是在自带Windows10系统进行），安装Deepin系统，简称<strong>Deepin-小四</strong>。</p></li></ul></li><li><p>2.克隆系统</p></li></ul><p>打开Clone软件，第一步选择操作介质: 分区，选择介质对应的操作: 克隆分区，然后点击下一步，选择原始分区和目标分区，点击开始克隆，等待完成。</p><ul><li>3.在新电脑启动</li></ul><p>克隆完成后，建议就转移到新电脑，先启动<strong>Deepin-小四</strong>，执行命令<code>sudo update-grub</code>，然后重启就可以进入引导界面，并发现里面有<strong>Deepin-小二</strong>，就说明克隆成功了。</p><p>之所以不建议在旧电脑启动<strong>Deepin-小二</strong>，是因为在旧电脑，<strong>Deepin-老大</strong>和<strong>Deepin-小二</strong>同时存在，引导程序可能对他们在识别上有点问题。<br>我在<strong>Deepin-小三</strong>执行<code>sudo update-grub</code>后，引导程序的确发现了这两个在不同位置的一模一样的系统，但启动的时候不论点击哪一个，似乎启动的都是原来的<strong>Deepin-小二</strong>，应该是<strong>Deepin-小二</strong>把<strong>Deepin-老大</strong>给覆盖了。</p><p>ps : 晚上我又测试了一下，把原系统升级了，15.9.3 unstable –&gt; 15.10.1 stable，看来Deepin支持从unstable直接升级到stable版本了。还有就是升级过后，把<strong>Deepin-小二</strong>和<strong>Deepin-老大</strong>放到一起，开机，系统久久不能启动，大概维持了5分钟。<br>然后，我觉得情况不对劲，就强制关机，把<strong>Deepin-小二</strong>放到新电脑上，开机，提示有些错误，然后执行检查，最后很快正常启动。看来那5分钟旧电脑还是做了些什么，试图区分老大和小二。还好我及时制止了，不然可能要出大事的(认真脸)。<br>算了算了，以后他们还是不要相见了，这让我想起一个电影，好像是叫做《月球》，挺悲伤的。关于克隆，确实有些东西让人（系统）难以接受。</p><ul><li>4.解决Deepin-小二分区大小问题</li></ul><p>启动<strong>Deepin-小二</strong>后，你也许会发现这个问题：<code>df -h</code>命令的结果显示，系统盘大小是110G（原系统Deepin-老大所在分区的大小），而<code>sudo fdisk -l</code>命令显示系统盘分区大小是238G（就是克隆操作目标硬盘的大小）。</p><p>那些多余的空间去哪了？能不能找回来呢？答案是可以！</p><p>只需要执行如下命令：</p><p><code>sudo resize2fs /dev/sda1</code></p><p>其中<code>/dev/sda1</code>是系统<strong>Deepin-小二</strong>所在的分区名字。</p><ul><li>5.领衔主演</li></ul><table><thead><tr><th style="text-align:center">姓名</th><th style="text-align:center">版本</th><th style="text-align:center">系统盘大小</th></tr></thead><tbody><tr><td style="text-align:center">Deepin-老大</td><td style="text-align:center">15.9.3</td><td style="text-align:center">110G</td></tr><tr><td style="text-align:center">Deepin-小二</td><td style="text-align:center">15.9.3</td><td style="text-align:center">238G</td></tr><tr><td style="text-align:center">Deepin-小三</td><td style="text-align:center">15.7.0</td><td style="text-align:center">80G</td></tr><tr><td style="text-align:center">Deepin-小四</td><td style="text-align:center">15.10.1</td><td style="text-align:center">60G</td></tr></tbody></table><h3 id="精简版"><a href="#精简版" class="headerlink" title="精简版"></a>精简版</h3><ul><li>1.在第三方系统上，使用Clone软件将待克隆系统从原始分区克隆到目标分区。</li><li>2.启动克隆系统后，执行<code>sudo resize2fs /dev/sda1</code>，其中<code>/dev/sda1</code>是克隆系统所在的分区名字。</li><li><strong>注意</strong>：不要在原电脑启动克隆系统</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有一些别的办法克隆系统，比如先备份，再还原，不再一一尝试啦，毕竟系统只是工具，弄好了就该办正事了，这才是最重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换了新电脑，就想把原来的系统迁移到新电脑上，毕竟新配置一个系统还是挺麻烦的。在论坛搜了一下，看到有说可以clone分区。然后就试了试，开始遇到一些问题，不过后来还是成功了。&lt;br&gt;
    
    </summary>
    
      <category term="电脑配置" scheme="https://wmjtxt.github.io/categories/%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux" scheme="https://wmjtxt.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>命名空间Namespace数据成员重复定义问题</title>
    <link href="https://wmjtxt.github.io/2019/04/23/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4namespace%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/"/>
    <id>https://wmjtxt.github.io/2019/04/23/命名空间namespace数据成员重复定义问题/</id>
    <published>2019-04-23T13:40:14.000Z</published>
    <updated>2020-04-16T13:22:08.174Z</updated>
    
    <content type="html"><![CDATA[<p>C++ Primer终于快看完了。<br><span id="more"></span><br>真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。<br>文件：</p><ul><li>np.h<br><code>`</code>c<br>#ifndef <strong>NP_H</strong><br>#define <strong>NP_H</strong> </li></ul><p>#include <iostream></p><p>namespace np{<br>    class NpTest{<br>    public:<br>        void print();<br>    private:<br>        int val = 2;<br>    };</p><pre><code>void add(int &amp;);//int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)namespace&#123;    int np_val;&#125;</code></pre><p>}</p><p>#endif</p><pre><code>* np.cpp```c#include &quot;np.h&quot;#include &lt;iostream&gt;using namespace np;namespace np&#123;    void NpTest::print()&#123;        std::cout &lt;&lt; &quot;val = &quot; &lt;&lt; val &lt;&lt; std::endl;    &#125;    void add(int &amp;a)&#123;        ++a;    &#125;&#125;</code></pre><ul><li>main.cpp<br><code>`</code>c<br>#include “np.h”<br>#include <iostream><br>using namespace std;<br>using namespace np;</li></ul><p>namespace np1{<br>    int np_val = 10;<br>}<br>namespace np1{<br>    void test(){<br>        ++np_val;<br>    }<br>}</p><p>int main(){<br>    NpTest a;<br>    a.print();<br>    int x = 1;<br>    add(x);<br>    cout &lt;&lt; x &lt;&lt; endl;<br>    np::np_val = 100;<br>    cout &lt;&lt; np::np_val &lt;&lt; endl;<br>    cout &lt;&lt; np1::np_val &lt;&lt; endl;<br>    np1::test();<br>    cout &lt;&lt; np1::np_val &lt;&lt; endl;<br>    return 0;<br>}<br><code>`</code><br>Problem: 其实就是注释的那一行，np_val存在重复定义问题。<br>就是每当np.h被include一次，np_val就被定义一次。<br>但是改成把np_val放到嵌套的匿名空间里就没有问题了。<br>现在还不太理解原因，待后面再看看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ Primer终于快看完了。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://wmjtxt.github.io/categories/Linux/"/>
    
    
      <category term="C++" scheme="https://wmjtxt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>木夕的诗</title>
    <link href="https://wmjtxt.github.io/2019/04/10/mjpoet/"/>
    <id>https://wmjtxt.github.io/2019/04/10/mjpoet/</id>
    <published>2019-04-10T01:01:34.000Z</published>
    <updated>2020-04-16T13:21:46.754Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/sunset.jpg" alt="sunset"></p><p>一些旧诗<br><span id="more"></span></p><h6 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h6><p><a href="#夜思">夜思(2009.10.01于海口)</a><br><a href=""></a><br><a href=""></a><br><a href=""></a></p><h6 id="夜思"><a href="#夜思" class="headerlink" title="夜思"></a>夜思</h6><p>2009.10.01 于海口<br>黛入秋空忽夜半，窗台露水月如弓。<br>风冲雾里花滴落，雨撞墙根草速生。<br>语逸心烦德不事，情闲意乱道难清。<br>方思铁血南疆撒，岂敢从心荡鼓钟。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sunset.jpg&quot; alt=&quot;sunset&quot;&gt;&lt;/p&gt;
&lt;p&gt;一些旧诗&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://wmjtxt.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="诗歌" scheme="https://wmjtxt.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
</feed>
